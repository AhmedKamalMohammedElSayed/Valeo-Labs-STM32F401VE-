
GPIO.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000a88  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000c1c  08000c24  00010c24  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000c1c  08000c1c  00010c24  2**0
                  CONTENTS
  4 .ARM          00000000  08000c1c  08000c1c  00010c24  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000c1c  08000c24  00010c24  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000c1c  08000c1c  00010c1c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000c20  08000c20  00010c20  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  00010c24  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000020  20000000  08000c24  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000020  08000c24  00020020  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00010c24  2**0
                  CONTENTS, READONLY
 12 .debug_info   00000481  00000000  00000000  00010c54  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00000233  00000000  00000000  000110d5  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000000e8  00000000  00000000  00011308  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000000a0  00000000  00000000  000113f0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0000105b  00000000  00000000  00011490  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00000405  00000000  00000000  000124eb  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000044bc  00000000  00000000  000128f0  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00016dac  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000228  00000000  00000000  00016e28  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	20000000 	.word	0x20000000
 80001b0:	00000000 	.word	0x00000000
 80001b4:	08000c04 	.word	0x08000c04

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000004 	.word	0x20000004
 80001d0:	08000c04 	.word	0x08000c04

080001d4 <Gpio_ConfigPin>:
//BN:		4				35
//team no : 39

#include"GPIO.h"

void Gpio_ConfigPin(uint32 PortName, uint32 PinNum, uint32 PinMode, uint32 DefaultState){
 80001d4:	b480      	push	{r7}
 80001d6:	b085      	sub	sp, #20
 80001d8:	af00      	add	r7, sp, #0
 80001da:	60f8      	str	r0, [r7, #12]
 80001dc:	60b9      	str	r1, [r7, #8]
 80001de:	607a      	str	r2, [r7, #4]
 80001e0:	603b      	str	r3, [r7, #0]

	switch(PortName){
 80001e2:	68fb      	ldr	r3, [r7, #12]
 80001e4:	3b41      	subs	r3, #65	; 0x41
 80001e6:	2b03      	cmp	r3, #3
 80001e8:	f200 80f8 	bhi.w	80003dc <Gpio_ConfigPin+0x208>
 80001ec:	a201      	add	r2, pc, #4	; (adr r2, 80001f4 <Gpio_ConfigPin+0x20>)
 80001ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80001f2:	bf00      	nop
 80001f4:	08000205 	.word	0x08000205
 80001f8:	0800027b 	.word	0x0800027b
 80001fc:	080002f1 	.word	0x080002f1
 8000200:	08000367 	.word	0x08000367
	case GPIO_A:
		CLEAR_BIT(GPIOA_MODER, PinNum*2, 0x03);
 8000204:	4b79      	ldr	r3, [pc, #484]	; (80003ec <Gpio_ConfigPin+0x218>)
 8000206:	681b      	ldr	r3, [r3, #0]
 8000208:	68ba      	ldr	r2, [r7, #8]
 800020a:	0052      	lsls	r2, r2, #1
 800020c:	2103      	movs	r1, #3
 800020e:	fa01 f202 	lsl.w	r2, r1, r2
 8000212:	43d2      	mvns	r2, r2
 8000214:	4611      	mov	r1, r2
 8000216:	4a75      	ldr	r2, [pc, #468]	; (80003ec <Gpio_ConfigPin+0x218>)
 8000218:	400b      	ands	r3, r1
 800021a:	6013      	str	r3, [r2, #0]
		SET_BIT(GPIOA_MODER, PinNum*2, PinMode);
 800021c:	4b73      	ldr	r3, [pc, #460]	; (80003ec <Gpio_ConfigPin+0x218>)
 800021e:	681a      	ldr	r2, [r3, #0]
 8000220:	68bb      	ldr	r3, [r7, #8]
 8000222:	005b      	lsls	r3, r3, #1
 8000224:	6879      	ldr	r1, [r7, #4]
 8000226:	fa01 f303 	lsl.w	r3, r1, r3
 800022a:	4970      	ldr	r1, [pc, #448]	; (80003ec <Gpio_ConfigPin+0x218>)
 800022c:	4313      	orrs	r3, r2
 800022e:	600b      	str	r3, [r1, #0]
		if(DefaultState == GPIO_OPEN_DRAIN || DefaultState == GPIO_PUSH_PULL){
 8000230:	683b      	ldr	r3, [r7, #0]
 8000232:	2b01      	cmp	r3, #1
 8000234:	d002      	beq.n	800023c <Gpio_ConfigPin+0x68>
 8000236:	683b      	ldr	r3, [r7, #0]
 8000238:	2b00      	cmp	r3, #0
 800023a:	d113      	bne.n	8000264 <Gpio_ConfigPin+0x90>
		CLEAR_BIT(GPIOA_OTYPER, PinNum, DefaultState);
 800023c:	4b6c      	ldr	r3, [pc, #432]	; (80003f0 <Gpio_ConfigPin+0x21c>)
 800023e:	681a      	ldr	r2, [r3, #0]
 8000240:	6839      	ldr	r1, [r7, #0]
 8000242:	68bb      	ldr	r3, [r7, #8]
 8000244:	fa01 f303 	lsl.w	r3, r1, r3
 8000248:	43db      	mvns	r3, r3
 800024a:	4969      	ldr	r1, [pc, #420]	; (80003f0 <Gpio_ConfigPin+0x21c>)
 800024c:	4013      	ands	r3, r2
 800024e:	600b      	str	r3, [r1, #0]
		SET_BIT(GPIOA_OTYPER, PinNum, DefaultState);
 8000250:	4b67      	ldr	r3, [pc, #412]	; (80003f0 <Gpio_ConfigPin+0x21c>)
 8000252:	681a      	ldr	r2, [r3, #0]
 8000254:	6839      	ldr	r1, [r7, #0]
 8000256:	68bb      	ldr	r3, [r7, #8]
 8000258:	fa01 f303 	lsl.w	r3, r1, r3
 800025c:	4964      	ldr	r1, [pc, #400]	; (80003f0 <Gpio_ConfigPin+0x21c>)
 800025e:	4313      	orrs	r3, r2
 8000260:	600b      	str	r3, [r1, #0]
		}
		else{
		    SET_BIT(GPIOA_PUPDR, 2*PinNum, DefaultState);
		}
		break;
 8000262:	e0bc      	b.n	80003de <Gpio_ConfigPin+0x20a>
		    SET_BIT(GPIOA_PUPDR, 2*PinNum, DefaultState);
 8000264:	4b63      	ldr	r3, [pc, #396]	; (80003f4 <Gpio_ConfigPin+0x220>)
 8000266:	681a      	ldr	r2, [r3, #0]
 8000268:	68bb      	ldr	r3, [r7, #8]
 800026a:	005b      	lsls	r3, r3, #1
 800026c:	6839      	ldr	r1, [r7, #0]
 800026e:	fa01 f303 	lsl.w	r3, r1, r3
 8000272:	4960      	ldr	r1, [pc, #384]	; (80003f4 <Gpio_ConfigPin+0x220>)
 8000274:	4313      	orrs	r3, r2
 8000276:	600b      	str	r3, [r1, #0]
		break;
 8000278:	e0b1      	b.n	80003de <Gpio_ConfigPin+0x20a>
	case GPIO_B:
		CLEAR_BIT(GPIOB_MODER, PinNum*2, 0x03);
 800027a:	4b5f      	ldr	r3, [pc, #380]	; (80003f8 <Gpio_ConfigPin+0x224>)
 800027c:	681b      	ldr	r3, [r3, #0]
 800027e:	68ba      	ldr	r2, [r7, #8]
 8000280:	0052      	lsls	r2, r2, #1
 8000282:	2103      	movs	r1, #3
 8000284:	fa01 f202 	lsl.w	r2, r1, r2
 8000288:	43d2      	mvns	r2, r2
 800028a:	4611      	mov	r1, r2
 800028c:	4a5a      	ldr	r2, [pc, #360]	; (80003f8 <Gpio_ConfigPin+0x224>)
 800028e:	400b      	ands	r3, r1
 8000290:	6013      	str	r3, [r2, #0]
		SET_BIT(GPIOB_MODER, PinNum*2, PinMode);
 8000292:	4b59      	ldr	r3, [pc, #356]	; (80003f8 <Gpio_ConfigPin+0x224>)
 8000294:	681a      	ldr	r2, [r3, #0]
 8000296:	68bb      	ldr	r3, [r7, #8]
 8000298:	005b      	lsls	r3, r3, #1
 800029a:	6879      	ldr	r1, [r7, #4]
 800029c:	fa01 f303 	lsl.w	r3, r1, r3
 80002a0:	4955      	ldr	r1, [pc, #340]	; (80003f8 <Gpio_ConfigPin+0x224>)
 80002a2:	4313      	orrs	r3, r2
 80002a4:	600b      	str	r3, [r1, #0]
		if(DefaultState == GPIO_OPEN_DRAIN || DefaultState == GPIO_PUSH_PULL){
 80002a6:	683b      	ldr	r3, [r7, #0]
 80002a8:	2b01      	cmp	r3, #1
 80002aa:	d002      	beq.n	80002b2 <Gpio_ConfigPin+0xde>
 80002ac:	683b      	ldr	r3, [r7, #0]
 80002ae:	2b00      	cmp	r3, #0
 80002b0:	d113      	bne.n	80002da <Gpio_ConfigPin+0x106>
		CLEAR_BIT(GPIOB_OTYPER, PinNum, DefaultState);
 80002b2:	4b52      	ldr	r3, [pc, #328]	; (80003fc <Gpio_ConfigPin+0x228>)
 80002b4:	681a      	ldr	r2, [r3, #0]
 80002b6:	6839      	ldr	r1, [r7, #0]
 80002b8:	68bb      	ldr	r3, [r7, #8]
 80002ba:	fa01 f303 	lsl.w	r3, r1, r3
 80002be:	43db      	mvns	r3, r3
 80002c0:	494e      	ldr	r1, [pc, #312]	; (80003fc <Gpio_ConfigPin+0x228>)
 80002c2:	4013      	ands	r3, r2
 80002c4:	600b      	str	r3, [r1, #0]
		SET_BIT(GPIOB_OTYPER, PinNum, DefaultState);
 80002c6:	4b4d      	ldr	r3, [pc, #308]	; (80003fc <Gpio_ConfigPin+0x228>)
 80002c8:	681a      	ldr	r2, [r3, #0]
 80002ca:	6839      	ldr	r1, [r7, #0]
 80002cc:	68bb      	ldr	r3, [r7, #8]
 80002ce:	fa01 f303 	lsl.w	r3, r1, r3
 80002d2:	494a      	ldr	r1, [pc, #296]	; (80003fc <Gpio_ConfigPin+0x228>)
 80002d4:	4313      	orrs	r3, r2
 80002d6:	600b      	str	r3, [r1, #0]
		}
		else{
		    SET_BIT(GPIOB_PUPDR, 2*PinNum, DefaultState);
		}
		break;
 80002d8:	e081      	b.n	80003de <Gpio_ConfigPin+0x20a>
		    SET_BIT(GPIOB_PUPDR, 2*PinNum, DefaultState);
 80002da:	4b49      	ldr	r3, [pc, #292]	; (8000400 <Gpio_ConfigPin+0x22c>)
 80002dc:	681a      	ldr	r2, [r3, #0]
 80002de:	68bb      	ldr	r3, [r7, #8]
 80002e0:	005b      	lsls	r3, r3, #1
 80002e2:	6839      	ldr	r1, [r7, #0]
 80002e4:	fa01 f303 	lsl.w	r3, r1, r3
 80002e8:	4945      	ldr	r1, [pc, #276]	; (8000400 <Gpio_ConfigPin+0x22c>)
 80002ea:	4313      	orrs	r3, r2
 80002ec:	600b      	str	r3, [r1, #0]
		break;
 80002ee:	e076      	b.n	80003de <Gpio_ConfigPin+0x20a>
	case GPIO_C:
		CLEAR_BIT(GPIOC_MODER, PinNum*2, 0x03);
 80002f0:	4b41      	ldr	r3, [pc, #260]	; (80003f8 <Gpio_ConfigPin+0x224>)
 80002f2:	681b      	ldr	r3, [r3, #0]
 80002f4:	68ba      	ldr	r2, [r7, #8]
 80002f6:	0052      	lsls	r2, r2, #1
 80002f8:	2103      	movs	r1, #3
 80002fa:	fa01 f202 	lsl.w	r2, r1, r2
 80002fe:	43d2      	mvns	r2, r2
 8000300:	4611      	mov	r1, r2
 8000302:	4a3d      	ldr	r2, [pc, #244]	; (80003f8 <Gpio_ConfigPin+0x224>)
 8000304:	400b      	ands	r3, r1
 8000306:	6013      	str	r3, [r2, #0]
		SET_BIT(GPIOC_MODER, PinNum*2, PinMode);
 8000308:	4b3b      	ldr	r3, [pc, #236]	; (80003f8 <Gpio_ConfigPin+0x224>)
 800030a:	681a      	ldr	r2, [r3, #0]
 800030c:	68bb      	ldr	r3, [r7, #8]
 800030e:	005b      	lsls	r3, r3, #1
 8000310:	6879      	ldr	r1, [r7, #4]
 8000312:	fa01 f303 	lsl.w	r3, r1, r3
 8000316:	4938      	ldr	r1, [pc, #224]	; (80003f8 <Gpio_ConfigPin+0x224>)
 8000318:	4313      	orrs	r3, r2
 800031a:	600b      	str	r3, [r1, #0]
		if(DefaultState == GPIO_OPEN_DRAIN || DefaultState == GPIO_PUSH_PULL){
 800031c:	683b      	ldr	r3, [r7, #0]
 800031e:	2b01      	cmp	r3, #1
 8000320:	d002      	beq.n	8000328 <Gpio_ConfigPin+0x154>
 8000322:	683b      	ldr	r3, [r7, #0]
 8000324:	2b00      	cmp	r3, #0
 8000326:	d113      	bne.n	8000350 <Gpio_ConfigPin+0x17c>
		CLEAR_BIT(GPIOC_OTYPER, PinNum, DefaultState);
 8000328:	4b34      	ldr	r3, [pc, #208]	; (80003fc <Gpio_ConfigPin+0x228>)
 800032a:	681a      	ldr	r2, [r3, #0]
 800032c:	6839      	ldr	r1, [r7, #0]
 800032e:	68bb      	ldr	r3, [r7, #8]
 8000330:	fa01 f303 	lsl.w	r3, r1, r3
 8000334:	43db      	mvns	r3, r3
 8000336:	4931      	ldr	r1, [pc, #196]	; (80003fc <Gpio_ConfigPin+0x228>)
 8000338:	4013      	ands	r3, r2
 800033a:	600b      	str	r3, [r1, #0]
		SET_BIT(GPIOC_OTYPER, PinNum, DefaultState);
 800033c:	4b2f      	ldr	r3, [pc, #188]	; (80003fc <Gpio_ConfigPin+0x228>)
 800033e:	681a      	ldr	r2, [r3, #0]
 8000340:	6839      	ldr	r1, [r7, #0]
 8000342:	68bb      	ldr	r3, [r7, #8]
 8000344:	fa01 f303 	lsl.w	r3, r1, r3
 8000348:	492c      	ldr	r1, [pc, #176]	; (80003fc <Gpio_ConfigPin+0x228>)
 800034a:	4313      	orrs	r3, r2
 800034c:	600b      	str	r3, [r1, #0]
		}
		else{
		    SET_BIT(GPIOC_PUPDR, 2*PinNum, DefaultState);
		}
		break;
 800034e:	e046      	b.n	80003de <Gpio_ConfigPin+0x20a>
		    SET_BIT(GPIOC_PUPDR, 2*PinNum, DefaultState);
 8000350:	4b2b      	ldr	r3, [pc, #172]	; (8000400 <Gpio_ConfigPin+0x22c>)
 8000352:	681a      	ldr	r2, [r3, #0]
 8000354:	68bb      	ldr	r3, [r7, #8]
 8000356:	005b      	lsls	r3, r3, #1
 8000358:	6839      	ldr	r1, [r7, #0]
 800035a:	fa01 f303 	lsl.w	r3, r1, r3
 800035e:	4928      	ldr	r1, [pc, #160]	; (8000400 <Gpio_ConfigPin+0x22c>)
 8000360:	4313      	orrs	r3, r2
 8000362:	600b      	str	r3, [r1, #0]
		break;
 8000364:	e03b      	b.n	80003de <Gpio_ConfigPin+0x20a>
	case GPIO_D:
		CLEAR_BIT(GPIOD_MODER, PinNum*2, 0x03);
 8000366:	4b24      	ldr	r3, [pc, #144]	; (80003f8 <Gpio_ConfigPin+0x224>)
 8000368:	681b      	ldr	r3, [r3, #0]
 800036a:	68ba      	ldr	r2, [r7, #8]
 800036c:	0052      	lsls	r2, r2, #1
 800036e:	2103      	movs	r1, #3
 8000370:	fa01 f202 	lsl.w	r2, r1, r2
 8000374:	43d2      	mvns	r2, r2
 8000376:	4611      	mov	r1, r2
 8000378:	4a1f      	ldr	r2, [pc, #124]	; (80003f8 <Gpio_ConfigPin+0x224>)
 800037a:	400b      	ands	r3, r1
 800037c:	6013      	str	r3, [r2, #0]
		SET_BIT(GPIOD_MODER, PinNum*2, PinMode);
 800037e:	4b1e      	ldr	r3, [pc, #120]	; (80003f8 <Gpio_ConfigPin+0x224>)
 8000380:	681a      	ldr	r2, [r3, #0]
 8000382:	68bb      	ldr	r3, [r7, #8]
 8000384:	005b      	lsls	r3, r3, #1
 8000386:	6879      	ldr	r1, [r7, #4]
 8000388:	fa01 f303 	lsl.w	r3, r1, r3
 800038c:	491a      	ldr	r1, [pc, #104]	; (80003f8 <Gpio_ConfigPin+0x224>)
 800038e:	4313      	orrs	r3, r2
 8000390:	600b      	str	r3, [r1, #0]
		if(DefaultState == GPIO_OPEN_DRAIN || DefaultState == GPIO_PUSH_PULL){
 8000392:	683b      	ldr	r3, [r7, #0]
 8000394:	2b01      	cmp	r3, #1
 8000396:	d002      	beq.n	800039e <Gpio_ConfigPin+0x1ca>
 8000398:	683b      	ldr	r3, [r7, #0]
 800039a:	2b00      	cmp	r3, #0
 800039c:	d113      	bne.n	80003c6 <Gpio_ConfigPin+0x1f2>
		CLEAR_BIT(GPIOD_OTYPER, PinNum, DefaultState);
 800039e:	4b17      	ldr	r3, [pc, #92]	; (80003fc <Gpio_ConfigPin+0x228>)
 80003a0:	681a      	ldr	r2, [r3, #0]
 80003a2:	6839      	ldr	r1, [r7, #0]
 80003a4:	68bb      	ldr	r3, [r7, #8]
 80003a6:	fa01 f303 	lsl.w	r3, r1, r3
 80003aa:	43db      	mvns	r3, r3
 80003ac:	4913      	ldr	r1, [pc, #76]	; (80003fc <Gpio_ConfigPin+0x228>)
 80003ae:	4013      	ands	r3, r2
 80003b0:	600b      	str	r3, [r1, #0]
		SET_BIT(GPIOD_OTYPER, PinNum, DefaultState);
 80003b2:	4b12      	ldr	r3, [pc, #72]	; (80003fc <Gpio_ConfigPin+0x228>)
 80003b4:	681a      	ldr	r2, [r3, #0]
 80003b6:	6839      	ldr	r1, [r7, #0]
 80003b8:	68bb      	ldr	r3, [r7, #8]
 80003ba:	fa01 f303 	lsl.w	r3, r1, r3
 80003be:	490f      	ldr	r1, [pc, #60]	; (80003fc <Gpio_ConfigPin+0x228>)
 80003c0:	4313      	orrs	r3, r2
 80003c2:	600b      	str	r3, [r1, #0]
		}
		else{
		    SET_BIT(GPIOD_PUPDR, 2*PinNum, DefaultState);
		}
		break;
 80003c4:	e00b      	b.n	80003de <Gpio_ConfigPin+0x20a>
		    SET_BIT(GPIOD_PUPDR, 2*PinNum, DefaultState);
 80003c6:	4b0e      	ldr	r3, [pc, #56]	; (8000400 <Gpio_ConfigPin+0x22c>)
 80003c8:	681a      	ldr	r2, [r3, #0]
 80003ca:	68bb      	ldr	r3, [r7, #8]
 80003cc:	005b      	lsls	r3, r3, #1
 80003ce:	6839      	ldr	r1, [r7, #0]
 80003d0:	fa01 f303 	lsl.w	r3, r1, r3
 80003d4:	490a      	ldr	r1, [pc, #40]	; (8000400 <Gpio_ConfigPin+0x22c>)
 80003d6:	4313      	orrs	r3, r2
 80003d8:	600b      	str	r3, [r1, #0]
		break;
 80003da:	e000      	b.n	80003de <Gpio_ConfigPin+0x20a>
	default:
		break;
 80003dc:	bf00      	nop
	}

}
 80003de:	bf00      	nop
 80003e0:	3714      	adds	r7, #20
 80003e2:	46bd      	mov	sp, r7
 80003e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003e8:	4770      	bx	lr
 80003ea:	bf00      	nop
 80003ec:	40020000 	.word	0x40020000
 80003f0:	40020004 	.word	0x40020004
 80003f4:	4002000c 	.word	0x4002000c
 80003f8:	40020400 	.word	0x40020400
 80003fc:	40020404 	.word	0x40020404
 8000400:	4002040c 	.word	0x4002040c

08000404 <Gpio_WritePin>:

Std_ReturnType Gpio_WritePin(uint32 PortName, uint32 PinNum, uint32 Data){
 8000404:	b480      	push	{r7}
 8000406:	b085      	sub	sp, #20
 8000408:	af00      	add	r7, sp, #0
 800040a:	60f8      	str	r0, [r7, #12]
 800040c:	60b9      	str	r1, [r7, #8]
 800040e:	607a      	str	r2, [r7, #4]

	switch(PortName){
 8000410:	68fb      	ldr	r3, [r7, #12]
 8000412:	3b41      	subs	r3, #65	; 0x41
 8000414:	2b03      	cmp	r3, #3
 8000416:	f200 8093 	bhi.w	8000540 <Gpio_WritePin+0x13c>
 800041a:	a201      	add	r2, pc, #4	; (adr r2, 8000420 <Gpio_WritePin+0x1c>)
 800041c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000420:	08000431 	.word	0x08000431
 8000424:	08000475 	.word	0x08000475
 8000428:	080004b9 	.word	0x080004b9
 800042c:	080004fd 	.word	0x080004fd
	case GPIO_A:
		if(	READ_BIT(GPIOA_MODER,PinNum*2,0x3) == GPIO_OUTPUT){
 8000430:	4b47      	ldr	r3, [pc, #284]	; (8000550 <Gpio_WritePin+0x14c>)
 8000432:	681a      	ldr	r2, [r3, #0]
 8000434:	68bb      	ldr	r3, [r7, #8]
 8000436:	005b      	lsls	r3, r3, #1
 8000438:	fa22 f303 	lsr.w	r3, r2, r3
 800043c:	f003 0303 	and.w	r3, r3, #3
 8000440:	2b01      	cmp	r3, #1
 8000442:	d115      	bne.n	8000470 <Gpio_WritePin+0x6c>
			CLEAR_BIT(GPIOA_ODR,PinNum,0x1);
 8000444:	4b43      	ldr	r3, [pc, #268]	; (8000554 <Gpio_WritePin+0x150>)
 8000446:	681b      	ldr	r3, [r3, #0]
 8000448:	2101      	movs	r1, #1
 800044a:	68ba      	ldr	r2, [r7, #8]
 800044c:	fa01 f202 	lsl.w	r2, r1, r2
 8000450:	43d2      	mvns	r2, r2
 8000452:	4611      	mov	r1, r2
 8000454:	4a3f      	ldr	r2, [pc, #252]	; (8000554 <Gpio_WritePin+0x150>)
 8000456:	400b      	ands	r3, r1
 8000458:	6013      	str	r3, [r2, #0]
			SET_BIT(GPIOA_ODR,PinNum,Data);
 800045a:	4b3e      	ldr	r3, [pc, #248]	; (8000554 <Gpio_WritePin+0x150>)
 800045c:	681a      	ldr	r2, [r3, #0]
 800045e:	6879      	ldr	r1, [r7, #4]
 8000460:	68bb      	ldr	r3, [r7, #8]
 8000462:	fa01 f303 	lsl.w	r3, r1, r3
 8000466:	493b      	ldr	r1, [pc, #236]	; (8000554 <Gpio_WritePin+0x150>)
 8000468:	4313      	orrs	r3, r2
 800046a:	600b      	str	r3, [r1, #0]
			return OK;
 800046c:	2301      	movs	r3, #1
 800046e:	e068      	b.n	8000542 <Gpio_WritePin+0x13e>
		}
		else{
			return NOK;
 8000470:	2300      	movs	r3, #0
 8000472:	e066      	b.n	8000542 <Gpio_WritePin+0x13e>
		}
		break;
	case GPIO_B:
		if(	READ_BIT(GPIOB_MODER,PinNum*2,0x3) == GPIO_OUTPUT){
 8000474:	4b38      	ldr	r3, [pc, #224]	; (8000558 <Gpio_WritePin+0x154>)
 8000476:	681a      	ldr	r2, [r3, #0]
 8000478:	68bb      	ldr	r3, [r7, #8]
 800047a:	005b      	lsls	r3, r3, #1
 800047c:	fa22 f303 	lsr.w	r3, r2, r3
 8000480:	f003 0303 	and.w	r3, r3, #3
 8000484:	2b01      	cmp	r3, #1
 8000486:	d115      	bne.n	80004b4 <Gpio_WritePin+0xb0>
			CLEAR_BIT(GPIOB_ODR,PinNum,0x1);
 8000488:	4b34      	ldr	r3, [pc, #208]	; (800055c <Gpio_WritePin+0x158>)
 800048a:	681b      	ldr	r3, [r3, #0]
 800048c:	2101      	movs	r1, #1
 800048e:	68ba      	ldr	r2, [r7, #8]
 8000490:	fa01 f202 	lsl.w	r2, r1, r2
 8000494:	43d2      	mvns	r2, r2
 8000496:	4611      	mov	r1, r2
 8000498:	4a30      	ldr	r2, [pc, #192]	; (800055c <Gpio_WritePin+0x158>)
 800049a:	400b      	ands	r3, r1
 800049c:	6013      	str	r3, [r2, #0]
			SET_BIT(GPIOB_ODR,PinNum,Data);
 800049e:	4b2f      	ldr	r3, [pc, #188]	; (800055c <Gpio_WritePin+0x158>)
 80004a0:	681a      	ldr	r2, [r3, #0]
 80004a2:	6879      	ldr	r1, [r7, #4]
 80004a4:	68bb      	ldr	r3, [r7, #8]
 80004a6:	fa01 f303 	lsl.w	r3, r1, r3
 80004aa:	492c      	ldr	r1, [pc, #176]	; (800055c <Gpio_WritePin+0x158>)
 80004ac:	4313      	orrs	r3, r2
 80004ae:	600b      	str	r3, [r1, #0]
			return OK;
 80004b0:	2301      	movs	r3, #1
 80004b2:	e046      	b.n	8000542 <Gpio_WritePin+0x13e>
		}
		else{
			return NOK;
 80004b4:	2300      	movs	r3, #0
 80004b6:	e044      	b.n	8000542 <Gpio_WritePin+0x13e>
		}
		break;
	case GPIO_C:
		if(	READ_BIT(GPIOC_MODER,PinNum*2,0x3) == GPIO_OUTPUT){
 80004b8:	4b27      	ldr	r3, [pc, #156]	; (8000558 <Gpio_WritePin+0x154>)
 80004ba:	681a      	ldr	r2, [r3, #0]
 80004bc:	68bb      	ldr	r3, [r7, #8]
 80004be:	005b      	lsls	r3, r3, #1
 80004c0:	fa22 f303 	lsr.w	r3, r2, r3
 80004c4:	f003 0303 	and.w	r3, r3, #3
 80004c8:	2b01      	cmp	r3, #1
 80004ca:	d115      	bne.n	80004f8 <Gpio_WritePin+0xf4>
			CLEAR_BIT(GPIOC_ODR,PinNum,0x1);
 80004cc:	4b23      	ldr	r3, [pc, #140]	; (800055c <Gpio_WritePin+0x158>)
 80004ce:	681b      	ldr	r3, [r3, #0]
 80004d0:	2101      	movs	r1, #1
 80004d2:	68ba      	ldr	r2, [r7, #8]
 80004d4:	fa01 f202 	lsl.w	r2, r1, r2
 80004d8:	43d2      	mvns	r2, r2
 80004da:	4611      	mov	r1, r2
 80004dc:	4a1f      	ldr	r2, [pc, #124]	; (800055c <Gpio_WritePin+0x158>)
 80004de:	400b      	ands	r3, r1
 80004e0:	6013      	str	r3, [r2, #0]
			SET_BIT(GPIOC_ODR,PinNum,Data);
 80004e2:	4b1e      	ldr	r3, [pc, #120]	; (800055c <Gpio_WritePin+0x158>)
 80004e4:	681a      	ldr	r2, [r3, #0]
 80004e6:	6879      	ldr	r1, [r7, #4]
 80004e8:	68bb      	ldr	r3, [r7, #8]
 80004ea:	fa01 f303 	lsl.w	r3, r1, r3
 80004ee:	491b      	ldr	r1, [pc, #108]	; (800055c <Gpio_WritePin+0x158>)
 80004f0:	4313      	orrs	r3, r2
 80004f2:	600b      	str	r3, [r1, #0]
			return OK;
 80004f4:	2301      	movs	r3, #1
 80004f6:	e024      	b.n	8000542 <Gpio_WritePin+0x13e>
		}
		else{
			return NOK;
 80004f8:	2300      	movs	r3, #0
 80004fa:	e022      	b.n	8000542 <Gpio_WritePin+0x13e>
		}
		break;
	case GPIO_D:
		if(	READ_BIT(GPIOD_MODER,PinNum*2,0x3) == GPIO_OUTPUT){
 80004fc:	4b16      	ldr	r3, [pc, #88]	; (8000558 <Gpio_WritePin+0x154>)
 80004fe:	681a      	ldr	r2, [r3, #0]
 8000500:	68bb      	ldr	r3, [r7, #8]
 8000502:	005b      	lsls	r3, r3, #1
 8000504:	fa22 f303 	lsr.w	r3, r2, r3
 8000508:	f003 0303 	and.w	r3, r3, #3
 800050c:	2b01      	cmp	r3, #1
 800050e:	d115      	bne.n	800053c <Gpio_WritePin+0x138>
			CLEAR_BIT(GPIOD_ODR,PinNum,0x1);
 8000510:	4b12      	ldr	r3, [pc, #72]	; (800055c <Gpio_WritePin+0x158>)
 8000512:	681b      	ldr	r3, [r3, #0]
 8000514:	2101      	movs	r1, #1
 8000516:	68ba      	ldr	r2, [r7, #8]
 8000518:	fa01 f202 	lsl.w	r2, r1, r2
 800051c:	43d2      	mvns	r2, r2
 800051e:	4611      	mov	r1, r2
 8000520:	4a0e      	ldr	r2, [pc, #56]	; (800055c <Gpio_WritePin+0x158>)
 8000522:	400b      	ands	r3, r1
 8000524:	6013      	str	r3, [r2, #0]
			SET_BIT(GPIOD_ODR,PinNum,Data);
 8000526:	4b0d      	ldr	r3, [pc, #52]	; (800055c <Gpio_WritePin+0x158>)
 8000528:	681a      	ldr	r2, [r3, #0]
 800052a:	6879      	ldr	r1, [r7, #4]
 800052c:	68bb      	ldr	r3, [r7, #8]
 800052e:	fa01 f303 	lsl.w	r3, r1, r3
 8000532:	490a      	ldr	r1, [pc, #40]	; (800055c <Gpio_WritePin+0x158>)
 8000534:	4313      	orrs	r3, r2
 8000536:	600b      	str	r3, [r1, #0]
			return OK;
 8000538:	2301      	movs	r3, #1
 800053a:	e002      	b.n	8000542 <Gpio_WritePin+0x13e>
		}
		else{
			return NOK;
 800053c:	2300      	movs	r3, #0
 800053e:	e000      	b.n	8000542 <Gpio_WritePin+0x13e>
		}
		break;
	}
	return 0;
 8000540:	2300      	movs	r3, #0
}
 8000542:	4618      	mov	r0, r3
 8000544:	3714      	adds	r7, #20
 8000546:	46bd      	mov	sp, r7
 8000548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800054c:	4770      	bx	lr
 800054e:	bf00      	nop
 8000550:	40020000 	.word	0x40020000
 8000554:	40020014 	.word	0x40020014
 8000558:	40020400 	.word	0x40020400
 800055c:	40020414 	.word	0x40020414

08000560 <GPIO_ReadPin>:


uint32 GPIO_ReadPin(uint32 PortName, uint32 PinNum){
 8000560:	b480      	push	{r7}
 8000562:	b083      	sub	sp, #12
 8000564:	af00      	add	r7, sp, #0
 8000566:	6078      	str	r0, [r7, #4]
 8000568:	6039      	str	r1, [r7, #0]
	switch(PortName){
 800056a:	687b      	ldr	r3, [r7, #4]
 800056c:	3b41      	subs	r3, #65	; 0x41
 800056e:	2b03      	cmp	r3, #3
 8000570:	d82a      	bhi.n	80005c8 <GPIO_ReadPin+0x68>
 8000572:	a201      	add	r2, pc, #4	; (adr r2, 8000578 <GPIO_ReadPin+0x18>)
 8000574:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000578:	08000589 	.word	0x08000589
 800057c:	08000599 	.word	0x08000599
 8000580:	080005a9 	.word	0x080005a9
 8000584:	080005b9 	.word	0x080005b9
	case GPIO_A:
	return READ_BIT(GPIOA_IDR,PinNum,0x1);
 8000588:	4b13      	ldr	r3, [pc, #76]	; (80005d8 <GPIO_ReadPin+0x78>)
 800058a:	681a      	ldr	r2, [r3, #0]
 800058c:	683b      	ldr	r3, [r7, #0]
 800058e:	fa22 f303 	lsr.w	r3, r2, r3
 8000592:	f003 0301 	and.w	r3, r3, #1
 8000596:	e018      	b.n	80005ca <GPIO_ReadPin+0x6a>
	break;

	case GPIO_B:
	return READ_BIT(GPIOB_IDR,PinNum,0x1);
 8000598:	4b10      	ldr	r3, [pc, #64]	; (80005dc <GPIO_ReadPin+0x7c>)
 800059a:	681a      	ldr	r2, [r3, #0]
 800059c:	683b      	ldr	r3, [r7, #0]
 800059e:	fa22 f303 	lsr.w	r3, r2, r3
 80005a2:	f003 0301 	and.w	r3, r3, #1
 80005a6:	e010      	b.n	80005ca <GPIO_ReadPin+0x6a>
	break;

	case GPIO_C:
	return READ_BIT(GPIOC_IDR,PinNum,0x1);
 80005a8:	4b0c      	ldr	r3, [pc, #48]	; (80005dc <GPIO_ReadPin+0x7c>)
 80005aa:	681a      	ldr	r2, [r3, #0]
 80005ac:	683b      	ldr	r3, [r7, #0]
 80005ae:	fa22 f303 	lsr.w	r3, r2, r3
 80005b2:	f003 0301 	and.w	r3, r3, #1
 80005b6:	e008      	b.n	80005ca <GPIO_ReadPin+0x6a>
	break;

	case GPIO_D:
	return READ_BIT(GPIOD_IDR,PinNum,0x1);
 80005b8:	4b08      	ldr	r3, [pc, #32]	; (80005dc <GPIO_ReadPin+0x7c>)
 80005ba:	681a      	ldr	r2, [r3, #0]
 80005bc:	683b      	ldr	r3, [r7, #0]
 80005be:	fa22 f303 	lsr.w	r3, r2, r3
 80005c2:	f003 0301 	and.w	r3, r3, #1
 80005c6:	e000      	b.n	80005ca <GPIO_ReadPin+0x6a>
	break;
	}
	return 0;
 80005c8:	2300      	movs	r3, #0
}
 80005ca:	4618      	mov	r0, r3
 80005cc:	370c      	adds	r7, #12
 80005ce:	46bd      	mov	sp, r7
 80005d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005d4:	4770      	bx	lr
 80005d6:	bf00      	nop
 80005d8:	40020010 	.word	0x40020010
 80005dc:	40020410 	.word	0x40020410

080005e0 <Keypad_Init>:
#include "Keypad.h"  // Include the header file that contains declarations and macros

uint32 key;  // Global variable to store the last pressed key


void Keypad_Init(void){  // Initialization function for the keypad
 80005e0:	b580      	push	{r7, lr}
 80005e2:	b082      	sub	sp, #8
 80005e4:	af00      	add	r7, sp, #0
    // Configure GPIO pins for columns
    uint32 index = 0;
 80005e6:	2300      	movs	r3, #0
 80005e8:	607b      	str	r3, [r7, #4]
    for(index = COL_START_INDEX; index <= COL_END_INDEX; index++){
 80005ea:	2300      	movs	r3, #0
 80005ec:	607b      	str	r3, [r7, #4]
 80005ee:	e008      	b.n	8000602 <Keypad_Init+0x22>
        Gpio_ConfigPin(COL_PORT, index, GPIO_INPUT, PULL_UP);  // Configure column pin as input with pull-up
 80005f0:	2301      	movs	r3, #1
 80005f2:	2200      	movs	r2, #0
 80005f4:	6879      	ldr	r1, [r7, #4]
 80005f6:	2042      	movs	r0, #66	; 0x42
 80005f8:	f7ff fdec 	bl	80001d4 <Gpio_ConfigPin>
    for(index = COL_START_INDEX; index <= COL_END_INDEX; index++){
 80005fc:	687b      	ldr	r3, [r7, #4]
 80005fe:	3301      	adds	r3, #1
 8000600:	607b      	str	r3, [r7, #4]
 8000602:	687b      	ldr	r3, [r7, #4]
 8000604:	2b02      	cmp	r3, #2
 8000606:	d9f3      	bls.n	80005f0 <Keypad_Init+0x10>
    }

    // Configure GPIO pins for rows
    for(index = ROW_START_INDEX; index <= ROW_END_INDEX; index++){
 8000608:	2305      	movs	r3, #5
 800060a:	607b      	str	r3, [r7, #4]
 800060c:	e00d      	b.n	800062a <Keypad_Init+0x4a>
        Gpio_ConfigPin(ROW_PORT, index, GPIO_OUTPUT, GPIO_PUSH_PULL);  // Configure row pin as output in push-pull mode
 800060e:	2300      	movs	r3, #0
 8000610:	2201      	movs	r2, #1
 8000612:	6879      	ldr	r1, [r7, #4]
 8000614:	2042      	movs	r0, #66	; 0x42
 8000616:	f7ff fddd 	bl	80001d4 <Gpio_ConfigPin>
       Gpio_WritePin(ROW_PORT, index, KEYPAD_BTN_RELEASED);  // Set row pin to released state
 800061a:	2201      	movs	r2, #1
 800061c:	6879      	ldr	r1, [r7, #4]
 800061e:	2042      	movs	r0, #66	; 0x42
 8000620:	f7ff fef0 	bl	8000404 <Gpio_WritePin>
    for(index = ROW_START_INDEX; index <= ROW_END_INDEX; index++){
 8000624:	687b      	ldr	r3, [r7, #4]
 8000626:	3301      	adds	r3, #1
 8000628:	607b      	str	r3, [r7, #4]
 800062a:	687b      	ldr	r3, [r7, #4]
 800062c:	2b08      	cmp	r3, #8
 800062e:	d9ee      	bls.n	800060e <Keypad_Init+0x2e>
    }
}
 8000630:	bf00      	nop
 8000632:	3708      	adds	r7, #8
 8000634:	46bd      	mov	sp, r7
 8000636:	bd80      	pop	{r7, pc}

08000638 <Keypad_Manage>:

void Keypad_Manage(void){  // Function to scan the keypad for button presses
 8000638:	b580      	push	{r7, lr}
 800063a:	b082      	sub	sp, #8
 800063c:	af00      	add	r7, sp, #0
//    Gpio_WritePin(ROW_PORT, ROW_START_INDEX, KEYPAD_BTN_RELEASED);
//    Gpio_WritePin(ROW_PORT, ROW_START_INDEX + 1, KEYPAD_BTN_RELEASED);
//    Gpio_WritePin(ROW_PORT, ROW_START_INDEX + 2, KEYPAD_BTN_RELEASED);
//    Gpio_WritePin(ROW_PORT, ROW_START_INDEX + 3, KEYPAD_BTN_RELEASED);

    for(rows = ROW_START_INDEX; rows <= ROW_END_INDEX; rows++){  // Iterate over rows
 800063e:	2305      	movs	r3, #5
 8000640:	607b      	str	r3, [r7, #4]
 8000642:	e031      	b.n	80006a8 <Keypad_Manage+0x70>
        Gpio_WritePin(ROW_PORT, rows, KEYPAD_BTN_PRESSED);  // Set current row to pressed state
 8000644:	2200      	movs	r2, #0
 8000646:	6879      	ldr	r1, [r7, #4]
 8000648:	2042      	movs	r0, #66	; 0x42
 800064a:	f7ff fedb 	bl	8000404 <Gpio_WritePin>
        for(cols = COL_START_INDEX; cols <= COL_END_INDEX; cols++){  // Iterate over columns
 800064e:	2300      	movs	r3, #0
 8000650:	603b      	str	r3, [r7, #0]
 8000652:	e01e      	b.n	8000692 <Keypad_Manage+0x5a>
            if(GPIO_ReadPin(COL_PORT, cols) == KEYPAD_BTN_PRESSED){  // Check if button in current row and column is released
 8000654:	6839      	ldr	r1, [r7, #0]
 8000656:	2042      	movs	r0, #66	; 0x42
 8000658:	f7ff ff82 	bl	8000560 <GPIO_ReadPin>
 800065c:	4603      	mov	r3, r0
 800065e:	2b00      	cmp	r3, #0
 8000660:	d114      	bne.n	800068c <Keypad_Manage+0x54>
                delay(50);  // Introduce delay for debouncing
 8000662:	2032      	movs	r0, #50	; 0x32
 8000664:	f000 f9c6 	bl	80009f4 <delay>
                if(GPIO_ReadPin(COL_PORT, cols) == KEYPAD_BTN_PRESSED){  // Check again if button is still released after delay
 8000668:	6839      	ldr	r1, [r7, #0]
 800066a:	2042      	movs	r0, #66	; 0x42
 800066c:	f7ff ff78 	bl	8000560 <GPIO_ReadPin>
 8000670:	4603      	mov	r3, r0
 8000672:	2b00      	cmp	r3, #0
 8000674:	d10a      	bne.n	800068c <Keypad_Manage+0x54>
                    key = ((rows - ROW_START_INDEX) * COL_NUM) + (cols - COL_START_INDEX);  // Calculate the pressed key
 8000676:	687a      	ldr	r2, [r7, #4]
 8000678:	4613      	mov	r3, r2
 800067a:	005b      	lsls	r3, r3, #1
 800067c:	441a      	add	r2, r3
 800067e:	683b      	ldr	r3, [r7, #0]
 8000680:	4413      	add	r3, r2
 8000682:	3b0f      	subs	r3, #15
 8000684:	4a0c      	ldr	r2, [pc, #48]	; (80006b8 <Keypad_Manage+0x80>)
 8000686:	6013      	str	r3, [r2, #0]
                    KeypadCallout_keypressNotification();  // Call a callback function to notify about key press
 8000688:	f000 f824 	bl	80006d4 <KeypadCallout_keypressNotification>
        for(cols = COL_START_INDEX; cols <= COL_END_INDEX; cols++){  // Iterate over columns
 800068c:	683b      	ldr	r3, [r7, #0]
 800068e:	3301      	adds	r3, #1
 8000690:	603b      	str	r3, [r7, #0]
 8000692:	683b      	ldr	r3, [r7, #0]
 8000694:	2b02      	cmp	r3, #2
 8000696:	d9dd      	bls.n	8000654 <Keypad_Manage+0x1c>
                }
            }
        }

       Gpio_WritePin(ROW_PORT, rows, KEYPAD_BTN_RELEASED);  // Reset current row to released state
 8000698:	2201      	movs	r2, #1
 800069a:	6879      	ldr	r1, [r7, #4]
 800069c:	2042      	movs	r0, #66	; 0x42
 800069e:	f7ff feb1 	bl	8000404 <Gpio_WritePin>
    for(rows = ROW_START_INDEX; rows <= ROW_END_INDEX; rows++){  // Iterate over rows
 80006a2:	687b      	ldr	r3, [r7, #4]
 80006a4:	3301      	adds	r3, #1
 80006a6:	607b      	str	r3, [r7, #4]
 80006a8:	687b      	ldr	r3, [r7, #4]
 80006aa:	2b08      	cmp	r3, #8
 80006ac:	d9ca      	bls.n	8000644 <Keypad_Manage+0xc>
    }
}
 80006ae:	bf00      	nop
 80006b0:	3708      	adds	r7, #8
 80006b2:	46bd      	mov	sp, r7
 80006b4:	bd80      	pop	{r7, pc}
 80006b6:	bf00      	nop
 80006b8:	2000001c 	.word	0x2000001c

080006bc <Keypad_GetKey>:

uint32 Keypad_GetKey(void){  // Function to get the last pressed key
 80006bc:	b480      	push	{r7}
 80006be:	af00      	add	r7, sp, #0
    return key;  // Return the last pressed key
 80006c0:	4b03      	ldr	r3, [pc, #12]	; (80006d0 <Keypad_GetKey+0x14>)
 80006c2:	681b      	ldr	r3, [r3, #0]
}
 80006c4:	4618      	mov	r0, r3
 80006c6:	46bd      	mov	sp, r7
 80006c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006cc:	4770      	bx	lr
 80006ce:	bf00      	nop
 80006d0:	2000001c 	.word	0x2000001c

080006d4 <KeypadCallout_keypressNotification>:

void KeypadCallout_keypressNotification(void){
 80006d4:	b580      	push	{r7, lr}
 80006d6:	b082      	sub	sp, #8
 80006d8:	af00      	add	r7, sp, #0

	uint32 num = Keypad_GetKey()+1;
 80006da:	f7ff ffef 	bl	80006bc <Keypad_GetKey>
 80006de:	4603      	mov	r3, r0
 80006e0:	3301      	adds	r3, #1
 80006e2:	607b      	str	r3, [r7, #4]
		switch (num) {
 80006e4:	687b      	ldr	r3, [r7, #4]
 80006e6:	2b09      	cmp	r3, #9
 80006e8:	f200 8180 	bhi.w	80009ec <KeypadCallout_keypressNotification+0x318>
 80006ec:	a201      	add	r2, pc, #4	; (adr r2, 80006f4 <KeypadCallout_keypressNotification+0x20>)
 80006ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80006f2:	bf00      	nop
 80006f4:	0800071d 	.word	0x0800071d
 80006f8:	08000765 	.word	0x08000765
 80006fc:	080007ad 	.word	0x080007ad
 8000700:	080007f5 	.word	0x080007f5
 8000704:	0800083d 	.word	0x0800083d
 8000708:	08000885 	.word	0x08000885
 800070c:	080008cd 	.word	0x080008cd
 8000710:	08000915 	.word	0x08000915
 8000714:	0800095d 	.word	0x0800095d
 8000718:	080009a5 	.word	0x080009a5
	        case 0:
	        	Gpio_WritePin(GPIO_A, PIN_1, HIGH);
 800071c:	2201      	movs	r2, #1
 800071e:	2101      	movs	r1, #1
 8000720:	2041      	movs	r0, #65	; 0x41
 8000722:	f7ff fe6f 	bl	8000404 <Gpio_WritePin>
	        	Gpio_WritePin(GPIO_A, PIN_0, HIGH);
 8000726:	2201      	movs	r2, #1
 8000728:	2100      	movs	r1, #0
 800072a:	2041      	movs	r0, #65	; 0x41
 800072c:	f7ff fe6a 	bl	8000404 <Gpio_WritePin>
	        	Gpio_WritePin(GPIO_A, PIN_2, HIGH);
 8000730:	2201      	movs	r2, #1
 8000732:	2102      	movs	r1, #2
 8000734:	2041      	movs	r0, #65	; 0x41
 8000736:	f7ff fe65 	bl	8000404 <Gpio_WritePin>
	        	Gpio_WritePin(GPIO_A, PIN_3, HIGH);
 800073a:	2201      	movs	r2, #1
 800073c:	2103      	movs	r1, #3
 800073e:	2041      	movs	r0, #65	; 0x41
 8000740:	f7ff fe60 	bl	8000404 <Gpio_WritePin>
	        	Gpio_WritePin(GPIO_A, PIN_4, HIGH);
 8000744:	2201      	movs	r2, #1
 8000746:	2104      	movs	r1, #4
 8000748:	2041      	movs	r0, #65	; 0x41
 800074a:	f7ff fe5b 	bl	8000404 <Gpio_WritePin>
	        	Gpio_WritePin(GPIO_A, PIN_5, HIGH);
 800074e:	2201      	movs	r2, #1
 8000750:	2105      	movs	r1, #5
 8000752:	2041      	movs	r0, #65	; 0x41
 8000754:	f7ff fe56 	bl	8000404 <Gpio_WritePin>
	        	Gpio_WritePin(GPIO_A, PIN_6, LOW);
 8000758:	2200      	movs	r2, #0
 800075a:	2106      	movs	r1, #6
 800075c:	2041      	movs	r0, #65	; 0x41
 800075e:	f7ff fe51 	bl	8000404 <Gpio_WritePin>
	           break;
 8000762:	e143      	b.n	80009ec <KeypadCallout_keypressNotification+0x318>
	        case 1:
	        	Gpio_WritePin(GPIO_A, PIN_0, LOW);
 8000764:	2200      	movs	r2, #0
 8000766:	2100      	movs	r1, #0
 8000768:	2041      	movs	r0, #65	; 0x41
 800076a:	f7ff fe4b 	bl	8000404 <Gpio_WritePin>
	        	Gpio_WritePin(GPIO_A, PIN_1, HIGH);
 800076e:	2201      	movs	r2, #1
 8000770:	2101      	movs	r1, #1
 8000772:	2041      	movs	r0, #65	; 0x41
 8000774:	f7ff fe46 	bl	8000404 <Gpio_WritePin>
	        	Gpio_WritePin(GPIO_A, PIN_2, HIGH);
 8000778:	2201      	movs	r2, #1
 800077a:	2102      	movs	r1, #2
 800077c:	2041      	movs	r0, #65	; 0x41
 800077e:	f7ff fe41 	bl	8000404 <Gpio_WritePin>
	        	Gpio_WritePin(GPIO_A, PIN_3, LOW);
 8000782:	2200      	movs	r2, #0
 8000784:	2103      	movs	r1, #3
 8000786:	2041      	movs	r0, #65	; 0x41
 8000788:	f7ff fe3c 	bl	8000404 <Gpio_WritePin>
	        	Gpio_WritePin(GPIO_A, PIN_4, LOW);
 800078c:	2200      	movs	r2, #0
 800078e:	2104      	movs	r1, #4
 8000790:	2041      	movs	r0, #65	; 0x41
 8000792:	f7ff fe37 	bl	8000404 <Gpio_WritePin>
	        	Gpio_WritePin(GPIO_A, PIN_5, LOW);
 8000796:	2200      	movs	r2, #0
 8000798:	2105      	movs	r1, #5
 800079a:	2041      	movs	r0, #65	; 0x41
 800079c:	f7ff fe32 	bl	8000404 <Gpio_WritePin>
	        	Gpio_WritePin(GPIO_A, PIN_6, LOW);
 80007a0:	2200      	movs	r2, #0
 80007a2:	2106      	movs	r1, #6
 80007a4:	2041      	movs	r0, #65	; 0x41
 80007a6:	f7ff fe2d 	bl	8000404 <Gpio_WritePin>
	            break;
 80007aa:	e11f      	b.n	80009ec <KeypadCallout_keypressNotification+0x318>
	        case 2:
	        	Gpio_WritePin(GPIO_A, PIN_0, HIGH);
 80007ac:	2201      	movs	r2, #1
 80007ae:	2100      	movs	r1, #0
 80007b0:	2041      	movs	r0, #65	; 0x41
 80007b2:	f7ff fe27 	bl	8000404 <Gpio_WritePin>
	        	Gpio_WritePin(GPIO_A, PIN_1, HIGH);
 80007b6:	2201      	movs	r2, #1
 80007b8:	2101      	movs	r1, #1
 80007ba:	2041      	movs	r0, #65	; 0x41
 80007bc:	f7ff fe22 	bl	8000404 <Gpio_WritePin>
	        	Gpio_WritePin(GPIO_A, PIN_2, LOW);
 80007c0:	2200      	movs	r2, #0
 80007c2:	2102      	movs	r1, #2
 80007c4:	2041      	movs	r0, #65	; 0x41
 80007c6:	f7ff fe1d 	bl	8000404 <Gpio_WritePin>
	        	Gpio_WritePin(GPIO_A, PIN_3, HIGH);
 80007ca:	2201      	movs	r2, #1
 80007cc:	2103      	movs	r1, #3
 80007ce:	2041      	movs	r0, #65	; 0x41
 80007d0:	f7ff fe18 	bl	8000404 <Gpio_WritePin>
	        	Gpio_WritePin(GPIO_A, PIN_4, HIGH);
 80007d4:	2201      	movs	r2, #1
 80007d6:	2104      	movs	r1, #4
 80007d8:	2041      	movs	r0, #65	; 0x41
 80007da:	f7ff fe13 	bl	8000404 <Gpio_WritePin>
	        	Gpio_WritePin(GPIO_A, PIN_5, LOW);
 80007de:	2200      	movs	r2, #0
 80007e0:	2105      	movs	r1, #5
 80007e2:	2041      	movs	r0, #65	; 0x41
 80007e4:	f7ff fe0e 	bl	8000404 <Gpio_WritePin>
	        	Gpio_WritePin(GPIO_A, PIN_6, HIGH);
 80007e8:	2201      	movs	r2, #1
 80007ea:	2106      	movs	r1, #6
 80007ec:	2041      	movs	r0, #65	; 0x41
 80007ee:	f7ff fe09 	bl	8000404 <Gpio_WritePin>
	            break;
 80007f2:	e0fb      	b.n	80009ec <KeypadCallout_keypressNotification+0x318>
	        case 3:
	        	Gpio_WritePin(GPIO_A, PIN_0, HIGH);
 80007f4:	2201      	movs	r2, #1
 80007f6:	2100      	movs	r1, #0
 80007f8:	2041      	movs	r0, #65	; 0x41
 80007fa:	f7ff fe03 	bl	8000404 <Gpio_WritePin>
	        	Gpio_WritePin(GPIO_A, PIN_1, HIGH);
 80007fe:	2201      	movs	r2, #1
 8000800:	2101      	movs	r1, #1
 8000802:	2041      	movs	r0, #65	; 0x41
 8000804:	f7ff fdfe 	bl	8000404 <Gpio_WritePin>
	        	Gpio_WritePin(GPIO_A, PIN_2, HIGH);
 8000808:	2201      	movs	r2, #1
 800080a:	2102      	movs	r1, #2
 800080c:	2041      	movs	r0, #65	; 0x41
 800080e:	f7ff fdf9 	bl	8000404 <Gpio_WritePin>
	        	Gpio_WritePin(GPIO_A, PIN_3, HIGH);
 8000812:	2201      	movs	r2, #1
 8000814:	2103      	movs	r1, #3
 8000816:	2041      	movs	r0, #65	; 0x41
 8000818:	f7ff fdf4 	bl	8000404 <Gpio_WritePin>
	        	Gpio_WritePin(GPIO_A, PIN_4, LOW);
 800081c:	2200      	movs	r2, #0
 800081e:	2104      	movs	r1, #4
 8000820:	2041      	movs	r0, #65	; 0x41
 8000822:	f7ff fdef 	bl	8000404 <Gpio_WritePin>
	        	Gpio_WritePin(GPIO_A, PIN_5, LOW);
 8000826:	2200      	movs	r2, #0
 8000828:	2105      	movs	r1, #5
 800082a:	2041      	movs	r0, #65	; 0x41
 800082c:	f7ff fdea 	bl	8000404 <Gpio_WritePin>
	        	Gpio_WritePin(GPIO_A, PIN_6, HIGH);
 8000830:	2201      	movs	r2, #1
 8000832:	2106      	movs	r1, #6
 8000834:	2041      	movs	r0, #65	; 0x41
 8000836:	f7ff fde5 	bl	8000404 <Gpio_WritePin>
	            break;
 800083a:	e0d7      	b.n	80009ec <KeypadCallout_keypressNotification+0x318>
	        case 4:
	        	Gpio_WritePin(GPIO_A, PIN_0, LOW);
 800083c:	2200      	movs	r2, #0
 800083e:	2100      	movs	r1, #0
 8000840:	2041      	movs	r0, #65	; 0x41
 8000842:	f7ff fddf 	bl	8000404 <Gpio_WritePin>
	        	Gpio_WritePin(GPIO_A, PIN_1, HIGH);
 8000846:	2201      	movs	r2, #1
 8000848:	2101      	movs	r1, #1
 800084a:	2041      	movs	r0, #65	; 0x41
 800084c:	f7ff fdda 	bl	8000404 <Gpio_WritePin>
	        	Gpio_WritePin(GPIO_A, PIN_2, HIGH);
 8000850:	2201      	movs	r2, #1
 8000852:	2102      	movs	r1, #2
 8000854:	2041      	movs	r0, #65	; 0x41
 8000856:	f7ff fdd5 	bl	8000404 <Gpio_WritePin>
	        	Gpio_WritePin(GPIO_A, PIN_3, LOW);
 800085a:	2200      	movs	r2, #0
 800085c:	2103      	movs	r1, #3
 800085e:	2041      	movs	r0, #65	; 0x41
 8000860:	f7ff fdd0 	bl	8000404 <Gpio_WritePin>
	        	Gpio_WritePin(GPIO_A, PIN_4, LOW);
 8000864:	2200      	movs	r2, #0
 8000866:	2104      	movs	r1, #4
 8000868:	2041      	movs	r0, #65	; 0x41
 800086a:	f7ff fdcb 	bl	8000404 <Gpio_WritePin>
	        	Gpio_WritePin(GPIO_A, PIN_5, HIGH);
 800086e:	2201      	movs	r2, #1
 8000870:	2105      	movs	r1, #5
 8000872:	2041      	movs	r0, #65	; 0x41
 8000874:	f7ff fdc6 	bl	8000404 <Gpio_WritePin>
	        	Gpio_WritePin(GPIO_A, PIN_6, HIGH);
 8000878:	2201      	movs	r2, #1
 800087a:	2106      	movs	r1, #6
 800087c:	2041      	movs	r0, #65	; 0x41
 800087e:	f7ff fdc1 	bl	8000404 <Gpio_WritePin>
	            break;
 8000882:	e0b3      	b.n	80009ec <KeypadCallout_keypressNotification+0x318>
	        case 5:
	        	Gpio_WritePin(GPIO_A, PIN_0, HIGH);
 8000884:	2201      	movs	r2, #1
 8000886:	2100      	movs	r1, #0
 8000888:	2041      	movs	r0, #65	; 0x41
 800088a:	f7ff fdbb 	bl	8000404 <Gpio_WritePin>
	        	Gpio_WritePin(GPIO_A, PIN_1, LOW);
 800088e:	2200      	movs	r2, #0
 8000890:	2101      	movs	r1, #1
 8000892:	2041      	movs	r0, #65	; 0x41
 8000894:	f7ff fdb6 	bl	8000404 <Gpio_WritePin>
	        	Gpio_WritePin(GPIO_A, PIN_2, HIGH);
 8000898:	2201      	movs	r2, #1
 800089a:	2102      	movs	r1, #2
 800089c:	2041      	movs	r0, #65	; 0x41
 800089e:	f7ff fdb1 	bl	8000404 <Gpio_WritePin>
	        	Gpio_WritePin(GPIO_A, PIN_3, HIGH);
 80008a2:	2201      	movs	r2, #1
 80008a4:	2103      	movs	r1, #3
 80008a6:	2041      	movs	r0, #65	; 0x41
 80008a8:	f7ff fdac 	bl	8000404 <Gpio_WritePin>
	        	Gpio_WritePin(GPIO_A, PIN_4, LOW);
 80008ac:	2200      	movs	r2, #0
 80008ae:	2104      	movs	r1, #4
 80008b0:	2041      	movs	r0, #65	; 0x41
 80008b2:	f7ff fda7 	bl	8000404 <Gpio_WritePin>
	        	Gpio_WritePin(GPIO_A, PIN_5, HIGH);
 80008b6:	2201      	movs	r2, #1
 80008b8:	2105      	movs	r1, #5
 80008ba:	2041      	movs	r0, #65	; 0x41
 80008bc:	f7ff fda2 	bl	8000404 <Gpio_WritePin>
	        	Gpio_WritePin(GPIO_A, PIN_6, HIGH);
 80008c0:	2201      	movs	r2, #1
 80008c2:	2106      	movs	r1, #6
 80008c4:	2041      	movs	r0, #65	; 0x41
 80008c6:	f7ff fd9d 	bl	8000404 <Gpio_WritePin>
	            break;
 80008ca:	e08f      	b.n	80009ec <KeypadCallout_keypressNotification+0x318>
	        case 6:
	        	Gpio_WritePin(GPIO_A, PIN_0, HIGH);
 80008cc:	2201      	movs	r2, #1
 80008ce:	2100      	movs	r1, #0
 80008d0:	2041      	movs	r0, #65	; 0x41
 80008d2:	f7ff fd97 	bl	8000404 <Gpio_WritePin>
	        	Gpio_WritePin(GPIO_A, PIN_1, LOW);
 80008d6:	2200      	movs	r2, #0
 80008d8:	2101      	movs	r1, #1
 80008da:	2041      	movs	r0, #65	; 0x41
 80008dc:	f7ff fd92 	bl	8000404 <Gpio_WritePin>
	        	Gpio_WritePin(GPIO_A, PIN_2, HIGH);
 80008e0:	2201      	movs	r2, #1
 80008e2:	2102      	movs	r1, #2
 80008e4:	2041      	movs	r0, #65	; 0x41
 80008e6:	f7ff fd8d 	bl	8000404 <Gpio_WritePin>
	        	Gpio_WritePin(GPIO_A, PIN_3, HIGH);
 80008ea:	2201      	movs	r2, #1
 80008ec:	2103      	movs	r1, #3
 80008ee:	2041      	movs	r0, #65	; 0x41
 80008f0:	f7ff fd88 	bl	8000404 <Gpio_WritePin>
	        	Gpio_WritePin(GPIO_A, PIN_4, HIGH);
 80008f4:	2201      	movs	r2, #1
 80008f6:	2104      	movs	r1, #4
 80008f8:	2041      	movs	r0, #65	; 0x41
 80008fa:	f7ff fd83 	bl	8000404 <Gpio_WritePin>
	        	Gpio_WritePin(GPIO_A, PIN_5, HIGH);
 80008fe:	2201      	movs	r2, #1
 8000900:	2105      	movs	r1, #5
 8000902:	2041      	movs	r0, #65	; 0x41
 8000904:	f7ff fd7e 	bl	8000404 <Gpio_WritePin>
	        	Gpio_WritePin(GPIO_A, PIN_6, HIGH);
 8000908:	2201      	movs	r2, #1
 800090a:	2106      	movs	r1, #6
 800090c:	2041      	movs	r0, #65	; 0x41
 800090e:	f7ff fd79 	bl	8000404 <Gpio_WritePin>
	            break;
 8000912:	e06b      	b.n	80009ec <KeypadCallout_keypressNotification+0x318>
	        case 7:
	        	Gpio_WritePin(GPIO_A, PIN_0, HIGH);
 8000914:	2201      	movs	r2, #1
 8000916:	2100      	movs	r1, #0
 8000918:	2041      	movs	r0, #65	; 0x41
 800091a:	f7ff fd73 	bl	8000404 <Gpio_WritePin>
	        	Gpio_WritePin(GPIO_A, PIN_1, HIGH);
 800091e:	2201      	movs	r2, #1
 8000920:	2101      	movs	r1, #1
 8000922:	2041      	movs	r0, #65	; 0x41
 8000924:	f7ff fd6e 	bl	8000404 <Gpio_WritePin>
	        	Gpio_WritePin(GPIO_A, PIN_2, HIGH);
 8000928:	2201      	movs	r2, #1
 800092a:	2102      	movs	r1, #2
 800092c:	2041      	movs	r0, #65	; 0x41
 800092e:	f7ff fd69 	bl	8000404 <Gpio_WritePin>
	        	Gpio_WritePin(GPIO_A, PIN_3, LOW);
 8000932:	2200      	movs	r2, #0
 8000934:	2103      	movs	r1, #3
 8000936:	2041      	movs	r0, #65	; 0x41
 8000938:	f7ff fd64 	bl	8000404 <Gpio_WritePin>
	        	Gpio_WritePin(GPIO_A, PIN_4, LOW);
 800093c:	2200      	movs	r2, #0
 800093e:	2104      	movs	r1, #4
 8000940:	2041      	movs	r0, #65	; 0x41
 8000942:	f7ff fd5f 	bl	8000404 <Gpio_WritePin>
	        	Gpio_WritePin(GPIO_A, PIN_5, LOW);
 8000946:	2200      	movs	r2, #0
 8000948:	2105      	movs	r1, #5
 800094a:	2041      	movs	r0, #65	; 0x41
 800094c:	f7ff fd5a 	bl	8000404 <Gpio_WritePin>
	        	Gpio_WritePin(GPIO_A, PIN_6, LOW);
 8000950:	2200      	movs	r2, #0
 8000952:	2106      	movs	r1, #6
 8000954:	2041      	movs	r0, #65	; 0x41
 8000956:	f7ff fd55 	bl	8000404 <Gpio_WritePin>
	            break;
 800095a:	e047      	b.n	80009ec <KeypadCallout_keypressNotification+0x318>
	        case 8:
	        	Gpio_WritePin(GPIO_A, PIN_0, HIGH);
 800095c:	2201      	movs	r2, #1
 800095e:	2100      	movs	r1, #0
 8000960:	2041      	movs	r0, #65	; 0x41
 8000962:	f7ff fd4f 	bl	8000404 <Gpio_WritePin>
	        	Gpio_WritePin(GPIO_A, PIN_1, HIGH);
 8000966:	2201      	movs	r2, #1
 8000968:	2101      	movs	r1, #1
 800096a:	2041      	movs	r0, #65	; 0x41
 800096c:	f7ff fd4a 	bl	8000404 <Gpio_WritePin>
	        	Gpio_WritePin(GPIO_A, PIN_2, HIGH);
 8000970:	2201      	movs	r2, #1
 8000972:	2102      	movs	r1, #2
 8000974:	2041      	movs	r0, #65	; 0x41
 8000976:	f7ff fd45 	bl	8000404 <Gpio_WritePin>
	        	Gpio_WritePin(GPIO_A, PIN_3, HIGH);
 800097a:	2201      	movs	r2, #1
 800097c:	2103      	movs	r1, #3
 800097e:	2041      	movs	r0, #65	; 0x41
 8000980:	f7ff fd40 	bl	8000404 <Gpio_WritePin>
	        	Gpio_WritePin(GPIO_A, PIN_4, HIGH);
 8000984:	2201      	movs	r2, #1
 8000986:	2104      	movs	r1, #4
 8000988:	2041      	movs	r0, #65	; 0x41
 800098a:	f7ff fd3b 	bl	8000404 <Gpio_WritePin>
	        	Gpio_WritePin(GPIO_A, PIN_5, HIGH);
 800098e:	2201      	movs	r2, #1
 8000990:	2105      	movs	r1, #5
 8000992:	2041      	movs	r0, #65	; 0x41
 8000994:	f7ff fd36 	bl	8000404 <Gpio_WritePin>
	        	Gpio_WritePin(GPIO_A, PIN_6, HIGH);
 8000998:	2201      	movs	r2, #1
 800099a:	2106      	movs	r1, #6
 800099c:	2041      	movs	r0, #65	; 0x41
 800099e:	f7ff fd31 	bl	8000404 <Gpio_WritePin>
	            break;
 80009a2:	e023      	b.n	80009ec <KeypadCallout_keypressNotification+0x318>
	        case 9:
	        	Gpio_WritePin(GPIO_A, PIN_0, HIGH);
 80009a4:	2201      	movs	r2, #1
 80009a6:	2100      	movs	r1, #0
 80009a8:	2041      	movs	r0, #65	; 0x41
 80009aa:	f7ff fd2b 	bl	8000404 <Gpio_WritePin>
	        	Gpio_WritePin(GPIO_A, PIN_1, HIGH);
 80009ae:	2201      	movs	r2, #1
 80009b0:	2101      	movs	r1, #1
 80009b2:	2041      	movs	r0, #65	; 0x41
 80009b4:	f7ff fd26 	bl	8000404 <Gpio_WritePin>
	        	Gpio_WritePin(GPIO_A, PIN_2, HIGH);
 80009b8:	2201      	movs	r2, #1
 80009ba:	2102      	movs	r1, #2
 80009bc:	2041      	movs	r0, #65	; 0x41
 80009be:	f7ff fd21 	bl	8000404 <Gpio_WritePin>
	        	Gpio_WritePin(GPIO_A, PIN_3, LOW);
 80009c2:	2200      	movs	r2, #0
 80009c4:	2103      	movs	r1, #3
 80009c6:	2041      	movs	r0, #65	; 0x41
 80009c8:	f7ff fd1c 	bl	8000404 <Gpio_WritePin>
	        	Gpio_WritePin(GPIO_A, PIN_4, LOW);
 80009cc:	2200      	movs	r2, #0
 80009ce:	2104      	movs	r1, #4
 80009d0:	2041      	movs	r0, #65	; 0x41
 80009d2:	f7ff fd17 	bl	8000404 <Gpio_WritePin>
	        	Gpio_WritePin(GPIO_A, PIN_5, HIGH);
 80009d6:	2201      	movs	r2, #1
 80009d8:	2105      	movs	r1, #5
 80009da:	2041      	movs	r0, #65	; 0x41
 80009dc:	f7ff fd12 	bl	8000404 <Gpio_WritePin>
	        	Gpio_WritePin(GPIO_A, PIN_6, HIGH);
 80009e0:	2201      	movs	r2, #1
 80009e2:	2106      	movs	r1, #6
 80009e4:	2041      	movs	r0, #65	; 0x41
 80009e6:	f7ff fd0d 	bl	8000404 <Gpio_WritePin>
	            break;
 80009ea:	bf00      	nop
	    }
}
 80009ec:	bf00      	nop
 80009ee:	3708      	adds	r7, #8
 80009f0:	46bd      	mov	sp, r7
 80009f2:	bd80      	pop	{r7, pc}

080009f4 <delay>:

void delay(uint32 count) {  // Function to introduce a delay
 80009f4:	b480      	push	{r7}
 80009f6:	b085      	sub	sp, #20
 80009f8:	af00      	add	r7, sp, #0
 80009fa:	6078      	str	r0, [r7, #4]
    for ( uint32 i = 0; i < count; i++);  // Loop for delay based on count
 80009fc:	2300      	movs	r3, #0
 80009fe:	60fb      	str	r3, [r7, #12]
 8000a00:	e002      	b.n	8000a08 <delay+0x14>
 8000a02:	68fb      	ldr	r3, [r7, #12]
 8000a04:	3301      	adds	r3, #1
 8000a06:	60fb      	str	r3, [r7, #12]
 8000a08:	68fa      	ldr	r2, [r7, #12]
 8000a0a:	687b      	ldr	r3, [r7, #4]
 8000a0c:	429a      	cmp	r2, r3
 8000a0e:	d3f8      	bcc.n	8000a02 <delay+0xe>
}
 8000a10:	bf00      	nop
 8000a12:	3714      	adds	r7, #20
 8000a14:	46bd      	mov	sp, r7
 8000a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a1a:	4770      	bx	lr

08000a1c <Rcc_Init>:
#define CLEAR_BIT(X, BIT)          (X &= ~(1 << (BIT)))
#define READ_BIT(X, BIT)           (((X) >> (BIT)) & 1)
#define TOGGLE_BIT(X, BIT)         (X ^= (1 << (BIT)))


void Rcc_Init(void) { SET_BIT(RCC_CR, 0); }
 8000a1c:	b480      	push	{r7}
 8000a1e:	af00      	add	r7, sp, #0
 8000a20:	4b05      	ldr	r3, [pc, #20]	; (8000a38 <Rcc_Init+0x1c>)
 8000a22:	681b      	ldr	r3, [r3, #0]
 8000a24:	4a04      	ldr	r2, [pc, #16]	; (8000a38 <Rcc_Init+0x1c>)
 8000a26:	f043 0301 	orr.w	r3, r3, #1
 8000a2a:	6013      	str	r3, [r2, #0]
 8000a2c:	bf00      	nop
 8000a2e:	46bd      	mov	sp, r7
 8000a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a34:	4770      	bx	lr
 8000a36:	bf00      	nop
 8000a38:	40023800 	.word	0x40023800

08000a3c <Rcc_Enable>:

void Rcc_Enable(Rcc_PeripheralIdType PeripheralId) {
 8000a3c:	b480      	push	{r7}
 8000a3e:	b085      	sub	sp, #20
 8000a40:	af00      	add	r7, sp, #0
 8000a42:	4603      	mov	r3, r0
 8000a44:	71fb      	strb	r3, [r7, #7]
  uint8 BusId = PeripheralId / 32;
 8000a46:	79fb      	ldrb	r3, [r7, #7]
 8000a48:	095b      	lsrs	r3, r3, #5
 8000a4a:	73fb      	strb	r3, [r7, #15]
  uint8 PeripheralBitPosition = PeripheralId % 32;
 8000a4c:	79fb      	ldrb	r3, [r7, #7]
 8000a4e:	f003 031f 	and.w	r3, r3, #31
 8000a52:	73bb      	strb	r3, [r7, #14]
  switch (BusId) {
 8000a54:	7bfb      	ldrb	r3, [r7, #15]
 8000a56:	2b03      	cmp	r3, #3
 8000a58:	d836      	bhi.n	8000ac8 <Rcc_Enable+0x8c>
 8000a5a:	a201      	add	r2, pc, #4	; (adr r2, 8000a60 <Rcc_Enable+0x24>)
 8000a5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000a60:	08000a71 	.word	0x08000a71
 8000a64:	08000a87 	.word	0x08000a87
 8000a68:	08000a9d 	.word	0x08000a9d
 8000a6c:	08000ab3 	.word	0x08000ab3
    case RCC_AHB1:
      SET_BIT(RCC_AHB1ENR, PeripheralBitPosition);
 8000a70:	4b19      	ldr	r3, [pc, #100]	; (8000ad8 <Rcc_Enable+0x9c>)
 8000a72:	681b      	ldr	r3, [r3, #0]
 8000a74:	7bba      	ldrb	r2, [r7, #14]
 8000a76:	2101      	movs	r1, #1
 8000a78:	fa01 f202 	lsl.w	r2, r1, r2
 8000a7c:	4611      	mov	r1, r2
 8000a7e:	4a16      	ldr	r2, [pc, #88]	; (8000ad8 <Rcc_Enable+0x9c>)
 8000a80:	430b      	orrs	r3, r1
 8000a82:	6013      	str	r3, [r2, #0]
      break;
 8000a84:	e021      	b.n	8000aca <Rcc_Enable+0x8e>
    case RCC_AHB2:
      SET_BIT(RCC_AHB2ENR, PeripheralBitPosition);
 8000a86:	4b15      	ldr	r3, [pc, #84]	; (8000adc <Rcc_Enable+0xa0>)
 8000a88:	681b      	ldr	r3, [r3, #0]
 8000a8a:	7bba      	ldrb	r2, [r7, #14]
 8000a8c:	2101      	movs	r1, #1
 8000a8e:	fa01 f202 	lsl.w	r2, r1, r2
 8000a92:	4611      	mov	r1, r2
 8000a94:	4a11      	ldr	r2, [pc, #68]	; (8000adc <Rcc_Enable+0xa0>)
 8000a96:	430b      	orrs	r3, r1
 8000a98:	6013      	str	r3, [r2, #0]
      break;
 8000a9a:	e016      	b.n	8000aca <Rcc_Enable+0x8e>
    case RCC_APB1:
      SET_BIT(RCC_APB1ENR, PeripheralBitPosition);
 8000a9c:	4b10      	ldr	r3, [pc, #64]	; (8000ae0 <Rcc_Enable+0xa4>)
 8000a9e:	681b      	ldr	r3, [r3, #0]
 8000aa0:	7bba      	ldrb	r2, [r7, #14]
 8000aa2:	2101      	movs	r1, #1
 8000aa4:	fa01 f202 	lsl.w	r2, r1, r2
 8000aa8:	4611      	mov	r1, r2
 8000aaa:	4a0d      	ldr	r2, [pc, #52]	; (8000ae0 <Rcc_Enable+0xa4>)
 8000aac:	430b      	orrs	r3, r1
 8000aae:	6013      	str	r3, [r2, #0]
      break;
 8000ab0:	e00b      	b.n	8000aca <Rcc_Enable+0x8e>
    case RCC_APB2:
      SET_BIT(RCC_APB2ENR, PeripheralBitPosition);
 8000ab2:	4b0c      	ldr	r3, [pc, #48]	; (8000ae4 <Rcc_Enable+0xa8>)
 8000ab4:	681b      	ldr	r3, [r3, #0]
 8000ab6:	7bba      	ldrb	r2, [r7, #14]
 8000ab8:	2101      	movs	r1, #1
 8000aba:	fa01 f202 	lsl.w	r2, r1, r2
 8000abe:	4611      	mov	r1, r2
 8000ac0:	4a08      	ldr	r2, [pc, #32]	; (8000ae4 <Rcc_Enable+0xa8>)
 8000ac2:	430b      	orrs	r3, r1
 8000ac4:	6013      	str	r3, [r2, #0]
      break;
 8000ac6:	e000      	b.n	8000aca <Rcc_Enable+0x8e>
    default:
      break;
 8000ac8:	bf00      	nop
  }
}
 8000aca:	bf00      	nop
 8000acc:	3714      	adds	r7, #20
 8000ace:	46bd      	mov	sp, r7
 8000ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ad4:	4770      	bx	lr
 8000ad6:	bf00      	nop
 8000ad8:	40023830 	.word	0x40023830
 8000adc:	40023834 	.word	0x40023834
 8000ae0:	40023840 	.word	0x40023840
 8000ae4:	40023844 	.word	0x40023844

08000ae8 <main>:
#include "Rcc.h"
#include "Keypad.h"


int main(void)
{
 8000ae8:	b580      	push	{r7, lr}
 8000aea:	af00      	add	r7, sp, #0
    Rcc_Init();
 8000aec:	f7ff ff96 	bl	8000a1c <Rcc_Init>
    Rcc_Enable(RCC_GPIOA);
 8000af0:	2000      	movs	r0, #0
 8000af2:	f7ff ffa3 	bl	8000a3c <Rcc_Enable>
    Rcc_Enable(RCC_GPIOB);
 8000af6:	2001      	movs	r0, #1
 8000af8:	f7ff ffa0 	bl	8000a3c <Rcc_Enable>


    /*     pin configuration for seven segment */

    Gpio_ConfigPin(GPIO_A, PIN_0, GPIO_OUTPUT, GPIO_PUSH_PULL);
 8000afc:	2300      	movs	r3, #0
 8000afe:	2201      	movs	r2, #1
 8000b00:	2100      	movs	r1, #0
 8000b02:	2041      	movs	r0, #65	; 0x41
 8000b04:	f7ff fb66 	bl	80001d4 <Gpio_ConfigPin>
    Gpio_ConfigPin(GPIO_A, PIN_1, GPIO_OUTPUT, GPIO_PUSH_PULL);
 8000b08:	2300      	movs	r3, #0
 8000b0a:	2201      	movs	r2, #1
 8000b0c:	2101      	movs	r1, #1
 8000b0e:	2041      	movs	r0, #65	; 0x41
 8000b10:	f7ff fb60 	bl	80001d4 <Gpio_ConfigPin>
    Gpio_ConfigPin(GPIO_A, PIN_2, GPIO_OUTPUT, GPIO_PUSH_PULL);
 8000b14:	2300      	movs	r3, #0
 8000b16:	2201      	movs	r2, #1
 8000b18:	2102      	movs	r1, #2
 8000b1a:	2041      	movs	r0, #65	; 0x41
 8000b1c:	f7ff fb5a 	bl	80001d4 <Gpio_ConfigPin>
    Gpio_ConfigPin(GPIO_A, PIN_3, GPIO_OUTPUT, GPIO_PUSH_PULL);
 8000b20:	2300      	movs	r3, #0
 8000b22:	2201      	movs	r2, #1
 8000b24:	2103      	movs	r1, #3
 8000b26:	2041      	movs	r0, #65	; 0x41
 8000b28:	f7ff fb54 	bl	80001d4 <Gpio_ConfigPin>
    Gpio_ConfigPin(GPIO_A, PIN_4, GPIO_OUTPUT, GPIO_PUSH_PULL);
 8000b2c:	2300      	movs	r3, #0
 8000b2e:	2201      	movs	r2, #1
 8000b30:	2104      	movs	r1, #4
 8000b32:	2041      	movs	r0, #65	; 0x41
 8000b34:	f7ff fb4e 	bl	80001d4 <Gpio_ConfigPin>
    Gpio_ConfigPin(GPIO_A, PIN_5, GPIO_OUTPUT, GPIO_PUSH_PULL);
 8000b38:	2300      	movs	r3, #0
 8000b3a:	2201      	movs	r2, #1
 8000b3c:	2105      	movs	r1, #5
 8000b3e:	2041      	movs	r0, #65	; 0x41
 8000b40:	f7ff fb48 	bl	80001d4 <Gpio_ConfigPin>
    Gpio_ConfigPin(GPIO_A, PIN_6, GPIO_OUTPUT, GPIO_PUSH_PULL);
 8000b44:	2300      	movs	r3, #0
 8000b46:	2201      	movs	r2, #1
 8000b48:	2106      	movs	r1, #6
 8000b4a:	2041      	movs	r0, #65	; 0x41
 8000b4c:	f7ff fb42 	bl	80001d4 <Gpio_ConfigPin>
    Gpio_ConfigPin(GPIO_A, PIN_7, GPIO_OUTPUT, GPIO_PUSH_PULL);
 8000b50:	2300      	movs	r3, #0
 8000b52:	2201      	movs	r2, #1
 8000b54:	2107      	movs	r1, #7
 8000b56:	2041      	movs	r0, #65	; 0x41
 8000b58:	f7ff fb3c 	bl	80001d4 <Gpio_ConfigPin>

    Keypad_Init();  // Initialization function for the keypad
 8000b5c:	f7ff fd40 	bl	80005e0 <Keypad_Init>
//        	Seven_Segment_Display(i);
//            delay(1000000);
//        }


    	Keypad_Manage();
 8000b60:	f7ff fd6a 	bl	8000638 <Keypad_Manage>
 8000b64:	e7fc      	b.n	8000b60 <main+0x78>
	...

08000b68 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000b68:	480d      	ldr	r0, [pc, #52]	; (8000ba0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000b6a:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000b6c:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000b70:	480c      	ldr	r0, [pc, #48]	; (8000ba4 <LoopForever+0x6>)
  ldr r1, =_edata
 8000b72:	490d      	ldr	r1, [pc, #52]	; (8000ba8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000b74:	4a0d      	ldr	r2, [pc, #52]	; (8000bac <LoopForever+0xe>)
  movs r3, #0
 8000b76:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000b78:	e002      	b.n	8000b80 <LoopCopyDataInit>

08000b7a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000b7a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000b7c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000b7e:	3304      	adds	r3, #4

08000b80 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000b80:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000b82:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000b84:	d3f9      	bcc.n	8000b7a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000b86:	4a0a      	ldr	r2, [pc, #40]	; (8000bb0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000b88:	4c0a      	ldr	r4, [pc, #40]	; (8000bb4 <LoopForever+0x16>)
  movs r3, #0
 8000b8a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000b8c:	e001      	b.n	8000b92 <LoopFillZerobss>

08000b8e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000b8e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000b90:	3204      	adds	r2, #4

08000b92 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000b92:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000b94:	d3fb      	bcc.n	8000b8e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000b96:	f000 f811 	bl	8000bbc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000b9a:	f7ff ffa5 	bl	8000ae8 <main>

08000b9e <LoopForever>:

LoopForever:
    b LoopForever
 8000b9e:	e7fe      	b.n	8000b9e <LoopForever>
  ldr   r0, =_estack
 8000ba0:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000ba4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ba8:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8000bac:	08000c24 	.word	0x08000c24
  ldr r2, =_sbss
 8000bb0:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 8000bb4:	20000020 	.word	0x20000020

08000bb8 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000bb8:	e7fe      	b.n	8000bb8 <ADC_IRQHandler>
	...

08000bbc <__libc_init_array>:
 8000bbc:	b570      	push	{r4, r5, r6, lr}
 8000bbe:	4e0d      	ldr	r6, [pc, #52]	; (8000bf4 <__libc_init_array+0x38>)
 8000bc0:	4c0d      	ldr	r4, [pc, #52]	; (8000bf8 <__libc_init_array+0x3c>)
 8000bc2:	1ba4      	subs	r4, r4, r6
 8000bc4:	10a4      	asrs	r4, r4, #2
 8000bc6:	2500      	movs	r5, #0
 8000bc8:	42a5      	cmp	r5, r4
 8000bca:	d109      	bne.n	8000be0 <__libc_init_array+0x24>
 8000bcc:	4e0b      	ldr	r6, [pc, #44]	; (8000bfc <__libc_init_array+0x40>)
 8000bce:	4c0c      	ldr	r4, [pc, #48]	; (8000c00 <__libc_init_array+0x44>)
 8000bd0:	f000 f818 	bl	8000c04 <_init>
 8000bd4:	1ba4      	subs	r4, r4, r6
 8000bd6:	10a4      	asrs	r4, r4, #2
 8000bd8:	2500      	movs	r5, #0
 8000bda:	42a5      	cmp	r5, r4
 8000bdc:	d105      	bne.n	8000bea <__libc_init_array+0x2e>
 8000bde:	bd70      	pop	{r4, r5, r6, pc}
 8000be0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000be4:	4798      	blx	r3
 8000be6:	3501      	adds	r5, #1
 8000be8:	e7ee      	b.n	8000bc8 <__libc_init_array+0xc>
 8000bea:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000bee:	4798      	blx	r3
 8000bf0:	3501      	adds	r5, #1
 8000bf2:	e7f2      	b.n	8000bda <__libc_init_array+0x1e>
 8000bf4:	08000c1c 	.word	0x08000c1c
 8000bf8:	08000c1c 	.word	0x08000c1c
 8000bfc:	08000c1c 	.word	0x08000c1c
 8000c00:	08000c20 	.word	0x08000c20

08000c04 <_init>:
 8000c04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000c06:	bf00      	nop
 8000c08:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000c0a:	bc08      	pop	{r3}
 8000c0c:	469e      	mov	lr, r3
 8000c0e:	4770      	bx	lr

08000c10 <_fini>:
 8000c10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000c12:	bf00      	nop
 8000c14:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000c16:	bc08      	pop	{r3}
 8000c18:	469e      	mov	lr, r3
 8000c1a:	4770      	bx	lr
