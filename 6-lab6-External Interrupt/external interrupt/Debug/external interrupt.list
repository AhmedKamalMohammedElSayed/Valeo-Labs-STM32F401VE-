
external interrupt.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000009b0  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000b44  08000b44  0002002c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000b44  08000b44  0002002c  2**0
                  CONTENTS
  4 .ARM          00000000  08000b44  08000b44  0002002c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000b44  08000b44  0002002c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000b44  08000b44  00010b44  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000b48  08000b48  00010b48  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000002c  20000000  08000b4c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000020  2000002c  08000b78  0002002c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000004c  08000b78  0002004c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002002c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00000955  00000000  00000000  0002005c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00000402  00000000  00000000  000209b1  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000128  00000000  00000000  00020db8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000000d0  00000000  00000000  00020ee0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00000f9f  00000000  00000000  00020fb0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000072a  00000000  00000000  00021f4f  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00004107  00000000  00000000  00022679  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00026780  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000300  00000000  00000000  000267fc  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	2000002c 	.word	0x2000002c
 80001b0:	00000000 	.word	0x00000000
 80001b4:	08000b2c 	.word	0x08000b2c

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000030 	.word	0x20000030
 80001d0:	08000b2c 	.word	0x08000b2c

080001d4 <Gpio_ConfigPin>:
uint32 GPIO_Addresses[2] = { 0x40020000, 0x40020400 };

#define GPIO_REG(REG_ID, PORT_ID) ((uint32*)((PORT_ID) + (REG_ID)))

void Gpio_ConfigPin(uint8 PortName, uint8 PinNum, uint8 PinMode,
        uint8 DefaultState) {
 80001d4:	b490      	push	{r4, r7}
 80001d6:	b086      	sub	sp, #24
 80001d8:	af00      	add	r7, sp, #0
 80001da:	4604      	mov	r4, r0
 80001dc:	4608      	mov	r0, r1
 80001de:	4611      	mov	r1, r2
 80001e0:	461a      	mov	r2, r3
 80001e2:	4623      	mov	r3, r4
 80001e4:	71fb      	strb	r3, [r7, #7]
 80001e6:	4603      	mov	r3, r0
 80001e8:	71bb      	strb	r3, [r7, #6]
 80001ea:	460b      	mov	r3, r1
 80001ec:	717b      	strb	r3, [r7, #5]
 80001ee:	4613      	mov	r3, r2
 80001f0:	713b      	strb	r3, [r7, #4]
    uint8 PortId = PortName - GPIO_A;
 80001f2:	79fb      	ldrb	r3, [r7, #7]
 80001f4:	3b41      	subs	r3, #65	; 0x41
 80001f6:	75fb      	strb	r3, [r7, #23]
    GpioType * gpioReg = (GpioType *) GPIO_Addresses[PortId]; // Cast to GpioType pointer
 80001f8:	7dfb      	ldrb	r3, [r7, #23]
 80001fa:	4a26      	ldr	r2, [pc, #152]	; (8000294 <Gpio_ConfigPin+0xc0>)
 80001fc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000200:	613b      	str	r3, [r7, #16]

    uint8 OutputState = DefaultState & 0x1;
 8000202:	793b      	ldrb	r3, [r7, #4]
 8000204:	f003 0301 	and.w	r3, r3, #1
 8000208:	73fb      	strb	r3, [r7, #15]
    uint8 InputState = DefaultState >> 1;
 800020a:	793b      	ldrb	r3, [r7, #4]
 800020c:	085b      	lsrs	r3, r3, #1
 800020e:	73bb      	strb	r3, [r7, #14]

    gpioReg->GPIO_MODER &= ~(0x3 << (2 * PinNum));
 8000210:	693b      	ldr	r3, [r7, #16]
 8000212:	681b      	ldr	r3, [r3, #0]
 8000214:	79ba      	ldrb	r2, [r7, #6]
 8000216:	0052      	lsls	r2, r2, #1
 8000218:	2103      	movs	r1, #3
 800021a:	fa01 f202 	lsl.w	r2, r1, r2
 800021e:	43d2      	mvns	r2, r2
 8000220:	401a      	ands	r2, r3
 8000222:	693b      	ldr	r3, [r7, #16]
 8000224:	601a      	str	r2, [r3, #0]
    gpioReg->GPIO_MODER |= (PinMode << (2 * PinNum));
 8000226:	693b      	ldr	r3, [r7, #16]
 8000228:	681b      	ldr	r3, [r3, #0]
 800022a:	7979      	ldrb	r1, [r7, #5]
 800022c:	79ba      	ldrb	r2, [r7, #6]
 800022e:	0052      	lsls	r2, r2, #1
 8000230:	fa01 f202 	lsl.w	r2, r1, r2
 8000234:	431a      	orrs	r2, r3
 8000236:	693b      	ldr	r3, [r7, #16]
 8000238:	601a      	str	r2, [r3, #0]

    gpioReg->GPIO_OTYPER  &= ~(0x01 << PinNum);
 800023a:	693b      	ldr	r3, [r7, #16]
 800023c:	685b      	ldr	r3, [r3, #4]
 800023e:	79ba      	ldrb	r2, [r7, #6]
 8000240:	2101      	movs	r1, #1
 8000242:	fa01 f202 	lsl.w	r2, r1, r2
 8000246:	43d2      	mvns	r2, r2
 8000248:	401a      	ands	r2, r3
 800024a:	693b      	ldr	r3, [r7, #16]
 800024c:	605a      	str	r2, [r3, #4]
    gpioReg->GPIO_OTYPER |= (OutputState << PinNum);
 800024e:	693b      	ldr	r3, [r7, #16]
 8000250:	685b      	ldr	r3, [r3, #4]
 8000252:	7bf9      	ldrb	r1, [r7, #15]
 8000254:	79ba      	ldrb	r2, [r7, #6]
 8000256:	fa01 f202 	lsl.w	r2, r1, r2
 800025a:	431a      	orrs	r2, r3
 800025c:	693b      	ldr	r3, [r7, #16]
 800025e:	605a      	str	r2, [r3, #4]

    gpioReg->GPIO_PUPDR &= ~(0x3 << (2 * PinNum));
 8000260:	693b      	ldr	r3, [r7, #16]
 8000262:	68db      	ldr	r3, [r3, #12]
 8000264:	79ba      	ldrb	r2, [r7, #6]
 8000266:	0052      	lsls	r2, r2, #1
 8000268:	2103      	movs	r1, #3
 800026a:	fa01 f202 	lsl.w	r2, r1, r2
 800026e:	43d2      	mvns	r2, r2
 8000270:	401a      	ands	r2, r3
 8000272:	693b      	ldr	r3, [r7, #16]
 8000274:	60da      	str	r2, [r3, #12]
    gpioReg->GPIO_PUPDR |= (InputState << (2 * PinNum));
 8000276:	693b      	ldr	r3, [r7, #16]
 8000278:	68db      	ldr	r3, [r3, #12]
 800027a:	7bb9      	ldrb	r1, [r7, #14]
 800027c:	79ba      	ldrb	r2, [r7, #6]
 800027e:	0052      	lsls	r2, r2, #1
 8000280:	fa01 f202 	lsl.w	r2, r1, r2
 8000284:	431a      	orrs	r2, r3
 8000286:	693b      	ldr	r3, [r7, #16]
 8000288:	60da      	str	r2, [r3, #12]
}
 800028a:	bf00      	nop
 800028c:	3718      	adds	r7, #24
 800028e:	46bd      	mov	sp, r7
 8000290:	bc90      	pop	{r4, r7}
 8000292:	4770      	bx	lr
 8000294:	20000000 	.word	0x20000000

08000298 <Gpio_WritePin>:

void Gpio_WritePin(uint8 PortName, uint8 PinNum, uint8 Data) {
 8000298:	b480      	push	{r7}
 800029a:	b085      	sub	sp, #20
 800029c:	af00      	add	r7, sp, #0
 800029e:	4603      	mov	r3, r0
 80002a0:	71fb      	strb	r3, [r7, #7]
 80002a2:	460b      	mov	r3, r1
 80002a4:	71bb      	strb	r3, [r7, #6]
 80002a6:	4613      	mov	r3, r2
 80002a8:	717b      	strb	r3, [r7, #5]
    uint8 PortId = PortName - GPIO_A;
 80002aa:	79fb      	ldrb	r3, [r7, #7]
 80002ac:	3b41      	subs	r3, #65	; 0x41
 80002ae:	73fb      	strb	r3, [r7, #15]
    GpioType * gpioReg = (GpioType *) GPIO_Addresses[PortId]; // Cast to GpioType pointer
 80002b0:	7bfb      	ldrb	r3, [r7, #15]
 80002b2:	4a0e      	ldr	r2, [pc, #56]	; (80002ec <Gpio_WritePin+0x54>)
 80002b4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80002b8:	60bb      	str	r3, [r7, #8]
    gpioReg->GPIO_ODR &= ~(0x01 << PinNum);
 80002ba:	68bb      	ldr	r3, [r7, #8]
 80002bc:	695b      	ldr	r3, [r3, #20]
 80002be:	79ba      	ldrb	r2, [r7, #6]
 80002c0:	2101      	movs	r1, #1
 80002c2:	fa01 f202 	lsl.w	r2, r1, r2
 80002c6:	43d2      	mvns	r2, r2
 80002c8:	401a      	ands	r2, r3
 80002ca:	68bb      	ldr	r3, [r7, #8]
 80002cc:	615a      	str	r2, [r3, #20]
    gpioReg->GPIO_ODR |= (Data << PinNum);
 80002ce:	68bb      	ldr	r3, [r7, #8]
 80002d0:	695b      	ldr	r3, [r3, #20]
 80002d2:	7979      	ldrb	r1, [r7, #5]
 80002d4:	79ba      	ldrb	r2, [r7, #6]
 80002d6:	fa01 f202 	lsl.w	r2, r1, r2
 80002da:	431a      	orrs	r2, r3
 80002dc:	68bb      	ldr	r3, [r7, #8]
 80002de:	615a      	str	r2, [r3, #20]
}
 80002e0:	bf00      	nop
 80002e2:	3714      	adds	r7, #20
 80002e4:	46bd      	mov	sp, r7
 80002e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002ea:	4770      	bx	lr
 80002ec:	20000000 	.word	0x20000000

080002f0 <Nvic_EnableInterrupt>:

// Arrays to hold the addresses of ISER and ICER registers
static volatile uint32 *NVIC_ISER[] = {&NVIC_ISER0, &NVIC_ISER1, &NVIC_ISER2};
static volatile uint32 *NVIC_ICER[] = {&NVIC_ICER0, &NVIC_ICER1, &NVIC_ICER2};

void Nvic_EnableInterrupt(uint8 IRQn) {
 80002f0:	b480      	push	{r7}
 80002f2:	b083      	sub	sp, #12
 80002f4:	af00      	add	r7, sp, #0
 80002f6:	4603      	mov	r3, r0
 80002f8:	71fb      	strb	r3, [r7, #7]
  if (IRQn < 96) {
 80002fa:	79fb      	ldrb	r3, [r7, #7]
 80002fc:	2b5f      	cmp	r3, #95	; 0x5f
 80002fe:	d817      	bhi.n	8000330 <Nvic_EnableInterrupt+0x40>
    SET_BIT(*NVIC_ISER[IRQn / 32], IRQn % 32);
 8000300:	79fb      	ldrb	r3, [r7, #7]
 8000302:	095b      	lsrs	r3, r3, #5
 8000304:	b2db      	uxtb	r3, r3
 8000306:	461a      	mov	r2, r3
 8000308:	4b0c      	ldr	r3, [pc, #48]	; (800033c <Nvic_EnableInterrupt+0x4c>)
 800030a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800030e:	681a      	ldr	r2, [r3, #0]
 8000310:	79fb      	ldrb	r3, [r7, #7]
 8000312:	f003 031f 	and.w	r3, r3, #31
 8000316:	2101      	movs	r1, #1
 8000318:	fa01 f303 	lsl.w	r3, r1, r3
 800031c:	4619      	mov	r1, r3
 800031e:	79fb      	ldrb	r3, [r7, #7]
 8000320:	095b      	lsrs	r3, r3, #5
 8000322:	b2db      	uxtb	r3, r3
 8000324:	4618      	mov	r0, r3
 8000326:	4b05      	ldr	r3, [pc, #20]	; (800033c <Nvic_EnableInterrupt+0x4c>)
 8000328:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 800032c:	430a      	orrs	r2, r1
 800032e:	601a      	str	r2, [r3, #0]
  }
}
 8000330:	bf00      	nop
 8000332:	370c      	adds	r7, #12
 8000334:	46bd      	mov	sp, r7
 8000336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800033a:	4770      	bx	lr
 800033c:	20000008 	.word	0x20000008

08000340 <Rcc_Init>:

#include "Bit_Operations.h"
#include "Rcc_Private.h"
#include "Std_Types.h"

void Rcc_Init(void) {
 8000340:	b480      	push	{r7}
 8000342:	af00      	add	r7, sp, #0
	SET_BIT(RCC_CR, 0);
 8000344:	4b05      	ldr	r3, [pc, #20]	; (800035c <Rcc_Init+0x1c>)
 8000346:	681b      	ldr	r3, [r3, #0]
 8000348:	4a04      	ldr	r2, [pc, #16]	; (800035c <Rcc_Init+0x1c>)
 800034a:	f043 0301 	orr.w	r3, r3, #1
 800034e:	6013      	str	r3, [r2, #0]
//	RCC_CFGR |= (0x0A << 4); // 8MHz internal
}
 8000350:	bf00      	nop
 8000352:	46bd      	mov	sp, r7
 8000354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000358:	4770      	bx	lr
 800035a:	bf00      	nop
 800035c:	40023800 	.word	0x40023800

08000360 <Rcc_Enable>:

void Rcc_Enable(Rcc_PeripheralIdType PeripheralId) {
 8000360:	b480      	push	{r7}
 8000362:	b085      	sub	sp, #20
 8000364:	af00      	add	r7, sp, #0
 8000366:	4603      	mov	r3, r0
 8000368:	71fb      	strb	r3, [r7, #7]
  uint8 BusId = PeripheralId / 32;
 800036a:	79fb      	ldrb	r3, [r7, #7]
 800036c:	095b      	lsrs	r3, r3, #5
 800036e:	73fb      	strb	r3, [r7, #15]
  uint8 PeripheralBitPosition = PeripheralId % 32;
 8000370:	79fb      	ldrb	r3, [r7, #7]
 8000372:	f003 031f 	and.w	r3, r3, #31
 8000376:	73bb      	strb	r3, [r7, #14]
  switch (BusId) {
 8000378:	7bfb      	ldrb	r3, [r7, #15]
 800037a:	2b03      	cmp	r3, #3
 800037c:	d836      	bhi.n	80003ec <Rcc_Enable+0x8c>
 800037e:	a201      	add	r2, pc, #4	; (adr r2, 8000384 <Rcc_Enable+0x24>)
 8000380:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000384:	08000395 	.word	0x08000395
 8000388:	080003ab 	.word	0x080003ab
 800038c:	080003c1 	.word	0x080003c1
 8000390:	080003d7 	.word	0x080003d7
    case RCC_AHB1:
      SET_BIT(RCC_AHB1ENR, PeripheralBitPosition);
 8000394:	4b19      	ldr	r3, [pc, #100]	; (80003fc <Rcc_Enable+0x9c>)
 8000396:	681b      	ldr	r3, [r3, #0]
 8000398:	7bba      	ldrb	r2, [r7, #14]
 800039a:	2101      	movs	r1, #1
 800039c:	fa01 f202 	lsl.w	r2, r1, r2
 80003a0:	4611      	mov	r1, r2
 80003a2:	4a16      	ldr	r2, [pc, #88]	; (80003fc <Rcc_Enable+0x9c>)
 80003a4:	430b      	orrs	r3, r1
 80003a6:	6013      	str	r3, [r2, #0]
      break;
 80003a8:	e021      	b.n	80003ee <Rcc_Enable+0x8e>
    case RCC_AHB2:
      SET_BIT(RCC_AHB2ENR, PeripheralBitPosition);
 80003aa:	4b15      	ldr	r3, [pc, #84]	; (8000400 <Rcc_Enable+0xa0>)
 80003ac:	681b      	ldr	r3, [r3, #0]
 80003ae:	7bba      	ldrb	r2, [r7, #14]
 80003b0:	2101      	movs	r1, #1
 80003b2:	fa01 f202 	lsl.w	r2, r1, r2
 80003b6:	4611      	mov	r1, r2
 80003b8:	4a11      	ldr	r2, [pc, #68]	; (8000400 <Rcc_Enable+0xa0>)
 80003ba:	430b      	orrs	r3, r1
 80003bc:	6013      	str	r3, [r2, #0]
      break;
 80003be:	e016      	b.n	80003ee <Rcc_Enable+0x8e>
    case RCC_APB1:
      SET_BIT(RCC_APB1ENR, PeripheralBitPosition);
 80003c0:	4b10      	ldr	r3, [pc, #64]	; (8000404 <Rcc_Enable+0xa4>)
 80003c2:	681b      	ldr	r3, [r3, #0]
 80003c4:	7bba      	ldrb	r2, [r7, #14]
 80003c6:	2101      	movs	r1, #1
 80003c8:	fa01 f202 	lsl.w	r2, r1, r2
 80003cc:	4611      	mov	r1, r2
 80003ce:	4a0d      	ldr	r2, [pc, #52]	; (8000404 <Rcc_Enable+0xa4>)
 80003d0:	430b      	orrs	r3, r1
 80003d2:	6013      	str	r3, [r2, #0]
      break;
 80003d4:	e00b      	b.n	80003ee <Rcc_Enable+0x8e>
    case RCC_APB2:
      SET_BIT(RCC_APB2ENR, PeripheralBitPosition);
 80003d6:	4b0c      	ldr	r3, [pc, #48]	; (8000408 <Rcc_Enable+0xa8>)
 80003d8:	681b      	ldr	r3, [r3, #0]
 80003da:	7bba      	ldrb	r2, [r7, #14]
 80003dc:	2101      	movs	r1, #1
 80003de:	fa01 f202 	lsl.w	r2, r1, r2
 80003e2:	4611      	mov	r1, r2
 80003e4:	4a08      	ldr	r2, [pc, #32]	; (8000408 <Rcc_Enable+0xa8>)
 80003e6:	430b      	orrs	r3, r1
 80003e8:	6013      	str	r3, [r2, #0]
      break;
 80003ea:	e000      	b.n	80003ee <Rcc_Enable+0x8e>
    default:
      break;
 80003ec:	bf00      	nop
  }
}
 80003ee:	bf00      	nop
 80003f0:	3714      	adds	r7, #20
 80003f2:	46bd      	mov	sp, r7
 80003f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003f8:	4770      	bx	lr
 80003fa:	bf00      	nop
 80003fc:	40023830 	.word	0x40023830
 8000400:	40023834 	.word	0x40023834
 8000404:	40023840 	.word	0x40023840
 8000408:	40023844 	.word	0x40023844

0800040c <main>:


void delay(uint32 count);
void Seven_Segment_Display(uint8 num);

int main() {
 800040c:	b580      	push	{r7, lr}
 800040e:	af00      	add	r7, sp, #0
	Rcc_Init();
 8000410:	f7ff ff96 	bl	8000340 <Rcc_Init>
	Rcc_Enable(RCC_GPIOA);
 8000414:	2000      	movs	r0, #0
 8000416:	f7ff ffa3 	bl	8000360 <Rcc_Enable>
	Rcc_Enable(RCC_GPIOB);
 800041a:	2001      	movs	r0, #1
 800041c:	f7ff ffa0 	bl	8000360 <Rcc_Enable>
	Rcc_Enable(RCC_SYSCFG);
 8000420:	206e      	movs	r0, #110	; 0x6e
 8000422:	f7ff ff9d 	bl	8000360 <Rcc_Enable>


	Gpio_ConfigPin(GPIO_B, 4, GPIO_INPUT, GPIO_PULL_UP);
 8000426:	2302      	movs	r3, #2
 8000428:	2200      	movs	r2, #0
 800042a:	2104      	movs	r1, #4
 800042c:	2042      	movs	r0, #66	; 0x42
 800042e:	f7ff fed1 	bl	80001d4 <Gpio_ConfigPin>
	Gpio_ConfigPin(GPIO_A, 9, GPIO_INPUT, GPIO_PULL_UP);
 8000432:	2302      	movs	r3, #2
 8000434:	2200      	movs	r2, #0
 8000436:	2109      	movs	r1, #9
 8000438:	2041      	movs	r0, #65	; 0x41
 800043a:	f7ff fecb 	bl	80001d4 <Gpio_ConfigPin>



    Gpio_ConfigPin(GPIO_A, 0, GPIO_OUTPUT, GPIO_PUSH_PULL);
 800043e:	2300      	movs	r3, #0
 8000440:	2201      	movs	r2, #1
 8000442:	2100      	movs	r1, #0
 8000444:	2041      	movs	r0, #65	; 0x41
 8000446:	f7ff fec5 	bl	80001d4 <Gpio_ConfigPin>
    Gpio_ConfigPin(GPIO_A, 1, GPIO_OUTPUT, GPIO_PUSH_PULL);
 800044a:	2300      	movs	r3, #0
 800044c:	2201      	movs	r2, #1
 800044e:	2101      	movs	r1, #1
 8000450:	2041      	movs	r0, #65	; 0x41
 8000452:	f7ff febf 	bl	80001d4 <Gpio_ConfigPin>
    Gpio_ConfigPin(GPIO_A, 2, GPIO_OUTPUT, GPIO_PUSH_PULL);
 8000456:	2300      	movs	r3, #0
 8000458:	2201      	movs	r2, #1
 800045a:	2102      	movs	r1, #2
 800045c:	2041      	movs	r0, #65	; 0x41
 800045e:	f7ff feb9 	bl	80001d4 <Gpio_ConfigPin>
    Gpio_ConfigPin(GPIO_A, 3, GPIO_OUTPUT, GPIO_PUSH_PULL);
 8000462:	2300      	movs	r3, #0
 8000464:	2201      	movs	r2, #1
 8000466:	2103      	movs	r1, #3
 8000468:	2041      	movs	r0, #65	; 0x41
 800046a:	f7ff feb3 	bl	80001d4 <Gpio_ConfigPin>
    Gpio_ConfigPin(GPIO_A, 4, GPIO_OUTPUT, GPIO_PUSH_PULL);
 800046e:	2300      	movs	r3, #0
 8000470:	2201      	movs	r2, #1
 8000472:	2104      	movs	r1, #4
 8000474:	2041      	movs	r0, #65	; 0x41
 8000476:	f7ff fead 	bl	80001d4 <Gpio_ConfigPin>
    Gpio_ConfigPin(GPIO_A, 5, GPIO_OUTPUT, GPIO_PUSH_PULL);
 800047a:	2300      	movs	r3, #0
 800047c:	2201      	movs	r2, #1
 800047e:	2105      	movs	r1, #5
 8000480:	2041      	movs	r0, #65	; 0x41
 8000482:	f7ff fea7 	bl	80001d4 <Gpio_ConfigPin>
    Gpio_ConfigPin(GPIO_A, 6, GPIO_OUTPUT, GPIO_PUSH_PULL);
 8000486:	2300      	movs	r3, #0
 8000488:	2201      	movs	r2, #1
 800048a:	2106      	movs	r1, #6
 800048c:	2041      	movs	r0, #65	; 0x41
 800048e:	f7ff fea1 	bl	80001d4 <Gpio_ConfigPin>
    Gpio_ConfigPin(GPIO_A, 7, GPIO_OUTPUT, GPIO_PUSH_PULL);
 8000492:	2300      	movs	r3, #0
 8000494:	2201      	movs	r2, #1
 8000496:	2107      	movs	r1, #7
 8000498:	2041      	movs	r0, #65	; 0x41
 800049a:	f7ff fe9b 	bl	80001d4 <Gpio_ConfigPin>





	Exti_Init(EXTI_GPIOA,9,EXTI_FALLING_EDGE);
 800049e:	2200      	movs	r2, #0
 80004a0:	2109      	movs	r1, #9
 80004a2:	2000      	movs	r0, #0
 80004a4:	f000 fa1c 	bl	80008e0 <Exti_Init>
	Exti_Enable(9);
 80004a8:	2009      	movs	r0, #9
 80004aa:	f000 faeb 	bl	8000a84 <Exti_Enable>
	Exti_HandlerPendingFlag(9);
 80004ae:	2009      	movs	r0, #9
 80004b0:	f000 fb00 	bl	8000ab4 <Exti_HandlerPendingFlag>

	Exti_Init(EXTI_GPIOB,4,EXTI_FALLING_EDGE);
 80004b4:	2200      	movs	r2, #0
 80004b6:	2104      	movs	r1, #4
 80004b8:	2001      	movs	r0, #1
 80004ba:	f000 fa11 	bl	80008e0 <Exti_Init>
	Exti_Enable(4);
 80004be:	2004      	movs	r0, #4
 80004c0:	f000 fae0 	bl	8000a84 <Exti_Enable>
	Exti_HandlerPendingFlag(4);
 80004c4:	2004      	movs	r0, #4
 80004c6:	f000 faf5 	bl	8000ab4 <Exti_HandlerPendingFlag>



	while (1) {

		Seven_Segment_Display(counter);
 80004ca:	4b05      	ldr	r3, [pc, #20]	; (80004e0 <main+0xd4>)
 80004cc:	781b      	ldrb	r3, [r3, #0]
 80004ce:	b2db      	uxtb	r3, r3
 80004d0:	4618      	mov	r0, r3
 80004d2:	f000 f84f 	bl	8000574 <Seven_Segment_Display>
		delay(50000);
 80004d6:	f24c 3050 	movw	r0, #50000	; 0xc350
 80004da:	f000 f803 	bl	80004e4 <delay>
		Seven_Segment_Display(counter);
 80004de:	e7f4      	b.n	80004ca <main+0xbe>
 80004e0:	20000048 	.word	0x20000048

080004e4 <delay>:
	}

	return 0;
}

void delay(uint32 count) {
 80004e4:	b480      	push	{r7}
 80004e6:	b085      	sub	sp, #20
 80004e8:	af00      	add	r7, sp, #0
 80004ea:	6078      	str	r0, [r7, #4]
    for ( uint32 i = 0; i < count; i++);
 80004ec:	2300      	movs	r3, #0
 80004ee:	60fb      	str	r3, [r7, #12]
 80004f0:	e002      	b.n	80004f8 <delay+0x14>
 80004f2:	68fb      	ldr	r3, [r7, #12]
 80004f4:	3301      	adds	r3, #1
 80004f6:	60fb      	str	r3, [r7, #12]
 80004f8:	68fa      	ldr	r2, [r7, #12]
 80004fa:	687b      	ldr	r3, [r7, #4]
 80004fc:	429a      	cmp	r2, r3
 80004fe:	d3f8      	bcc.n	80004f2 <delay+0xe>
}
 8000500:	bf00      	nop
 8000502:	3714      	adds	r7, #20
 8000504:	46bd      	mov	sp, r7
 8000506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800050a:	4770      	bx	lr

0800050c <EXTI4_IRQHandler>:


void EXTI4_IRQHandler(void) {
 800050c:	b480      	push	{r7}
 800050e:	af00      	add	r7, sp, #0

    if (counter > 0) {
 8000510:	4b0a      	ldr	r3, [pc, #40]	; (800053c <EXTI4_IRQHandler+0x30>)
 8000512:	781b      	ldrb	r3, [r3, #0]
 8000514:	b2db      	uxtb	r3, r3
 8000516:	2b00      	cmp	r3, #0
 8000518:	d007      	beq.n	800052a <EXTI4_IRQHandler+0x1e>
        counter--;
 800051a:	4b08      	ldr	r3, [pc, #32]	; (800053c <EXTI4_IRQHandler+0x30>)
 800051c:	781b      	ldrb	r3, [r3, #0]
 800051e:	b2db      	uxtb	r3, r3
 8000520:	3b01      	subs	r3, #1
 8000522:	b2da      	uxtb	r2, r3
 8000524:	4b05      	ldr	r3, [pc, #20]	; (800053c <EXTI4_IRQHandler+0x30>)
 8000526:	701a      	strb	r2, [r3, #0]
    }
    else{
        counter = 9;
    }
} 
 8000528:	e002      	b.n	8000530 <EXTI4_IRQHandler+0x24>
        counter = 9;
 800052a:	4b04      	ldr	r3, [pc, #16]	; (800053c <EXTI4_IRQHandler+0x30>)
 800052c:	2209      	movs	r2, #9
 800052e:	701a      	strb	r2, [r3, #0]
} 
 8000530:	bf00      	nop
 8000532:	46bd      	mov	sp, r7
 8000534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000538:	4770      	bx	lr
 800053a:	bf00      	nop
 800053c:	20000048 	.word	0x20000048

08000540 <EXTI9_5_IRQHandler>:

void EXTI9_5_IRQHandler(void){
 8000540:	b480      	push	{r7}
 8000542:	af00      	add	r7, sp, #0

    if (counter < 9) {
 8000544:	4b0a      	ldr	r3, [pc, #40]	; (8000570 <EXTI9_5_IRQHandler+0x30>)
 8000546:	781b      	ldrb	r3, [r3, #0]
 8000548:	b2db      	uxtb	r3, r3
 800054a:	2b08      	cmp	r3, #8
 800054c:	d807      	bhi.n	800055e <EXTI9_5_IRQHandler+0x1e>
        counter++;
 800054e:	4b08      	ldr	r3, [pc, #32]	; (8000570 <EXTI9_5_IRQHandler+0x30>)
 8000550:	781b      	ldrb	r3, [r3, #0]
 8000552:	b2db      	uxtb	r3, r3
 8000554:	3301      	adds	r3, #1
 8000556:	b2da      	uxtb	r2, r3
 8000558:	4b05      	ldr	r3, [pc, #20]	; (8000570 <EXTI9_5_IRQHandler+0x30>)
 800055a:	701a      	strb	r2, [r3, #0]
    else
    {
        counter = 0;
    }

}
 800055c:	e002      	b.n	8000564 <EXTI9_5_IRQHandler+0x24>
        counter = 0;
 800055e:	4b04      	ldr	r3, [pc, #16]	; (8000570 <EXTI9_5_IRQHandler+0x30>)
 8000560:	2200      	movs	r2, #0
 8000562:	701a      	strb	r2, [r3, #0]
}
 8000564:	bf00      	nop
 8000566:	46bd      	mov	sp, r7
 8000568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800056c:	4770      	bx	lr
 800056e:	bf00      	nop
 8000570:	20000048 	.word	0x20000048

08000574 <Seven_Segment_Display>:

void Seven_Segment_Display(uint8 num) {
 8000574:	b580      	push	{r7, lr}
 8000576:	b082      	sub	sp, #8
 8000578:	af00      	add	r7, sp, #0
 800057a:	4603      	mov	r3, r0
 800057c:	71fb      	strb	r3, [r7, #7]
    switch (num) {
 800057e:	79fb      	ldrb	r3, [r7, #7]
 8000580:	2b09      	cmp	r3, #9
 8000582:	f200 817f 	bhi.w	8000884 <Seven_Segment_Display+0x310>
 8000586:	a201      	add	r2, pc, #4	; (adr r2, 800058c <Seven_Segment_Display+0x18>)
 8000588:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800058c:	080005b5 	.word	0x080005b5
 8000590:	080005fd 	.word	0x080005fd
 8000594:	08000645 	.word	0x08000645
 8000598:	0800068d 	.word	0x0800068d
 800059c:	080006d5 	.word	0x080006d5
 80005a0:	0800071d 	.word	0x0800071d
 80005a4:	08000765 	.word	0x08000765
 80005a8:	080007ad 	.word	0x080007ad
 80005ac:	080007f5 	.word	0x080007f5
 80005b0:	0800083d 	.word	0x0800083d
        case 0:
            Gpio_WritePin(GPIO_A, 0, HIGH);
 80005b4:	2201      	movs	r2, #1
 80005b6:	2100      	movs	r1, #0
 80005b8:	2041      	movs	r0, #65	; 0x41
 80005ba:	f7ff fe6d 	bl	8000298 <Gpio_WritePin>
            Gpio_WritePin(GPIO_A, 1, HIGH);
 80005be:	2201      	movs	r2, #1
 80005c0:	2101      	movs	r1, #1
 80005c2:	2041      	movs	r0, #65	; 0x41
 80005c4:	f7ff fe68 	bl	8000298 <Gpio_WritePin>
            Gpio_WritePin(GPIO_A, 2, HIGH);
 80005c8:	2201      	movs	r2, #1
 80005ca:	2102      	movs	r1, #2
 80005cc:	2041      	movs	r0, #65	; 0x41
 80005ce:	f7ff fe63 	bl	8000298 <Gpio_WritePin>
            Gpio_WritePin(GPIO_A, 3, HIGH);
 80005d2:	2201      	movs	r2, #1
 80005d4:	2103      	movs	r1, #3
 80005d6:	2041      	movs	r0, #65	; 0x41
 80005d8:	f7ff fe5e 	bl	8000298 <Gpio_WritePin>
            Gpio_WritePin(GPIO_A, 4, HIGH);
 80005dc:	2201      	movs	r2, #1
 80005de:	2104      	movs	r1, #4
 80005e0:	2041      	movs	r0, #65	; 0x41
 80005e2:	f7ff fe59 	bl	8000298 <Gpio_WritePin>
            Gpio_WritePin(GPIO_A, 5, HIGH);
 80005e6:	2201      	movs	r2, #1
 80005e8:	2105      	movs	r1, #5
 80005ea:	2041      	movs	r0, #65	; 0x41
 80005ec:	f7ff fe54 	bl	8000298 <Gpio_WritePin>
            Gpio_WritePin(GPIO_A, 6, LOW);
 80005f0:	2200      	movs	r2, #0
 80005f2:	2106      	movs	r1, #6
 80005f4:	2041      	movs	r0, #65	; 0x41
 80005f6:	f7ff fe4f 	bl	8000298 <Gpio_WritePin>
            break;
 80005fa:	e143      	b.n	8000884 <Seven_Segment_Display+0x310>
        case 1:
            Gpio_WritePin(GPIO_A, 0, LOW);
 80005fc:	2200      	movs	r2, #0
 80005fe:	2100      	movs	r1, #0
 8000600:	2041      	movs	r0, #65	; 0x41
 8000602:	f7ff fe49 	bl	8000298 <Gpio_WritePin>
            Gpio_WritePin(GPIO_A, 1, HIGH);
 8000606:	2201      	movs	r2, #1
 8000608:	2101      	movs	r1, #1
 800060a:	2041      	movs	r0, #65	; 0x41
 800060c:	f7ff fe44 	bl	8000298 <Gpio_WritePin>
            Gpio_WritePin(GPIO_A, 2, HIGH);
 8000610:	2201      	movs	r2, #1
 8000612:	2102      	movs	r1, #2
 8000614:	2041      	movs	r0, #65	; 0x41
 8000616:	f7ff fe3f 	bl	8000298 <Gpio_WritePin>
            Gpio_WritePin(GPIO_A, 3, LOW);
 800061a:	2200      	movs	r2, #0
 800061c:	2103      	movs	r1, #3
 800061e:	2041      	movs	r0, #65	; 0x41
 8000620:	f7ff fe3a 	bl	8000298 <Gpio_WritePin>
            Gpio_WritePin(GPIO_A, 4, LOW);
 8000624:	2200      	movs	r2, #0
 8000626:	2104      	movs	r1, #4
 8000628:	2041      	movs	r0, #65	; 0x41
 800062a:	f7ff fe35 	bl	8000298 <Gpio_WritePin>
            Gpio_WritePin(GPIO_A, 5, LOW);
 800062e:	2200      	movs	r2, #0
 8000630:	2105      	movs	r1, #5
 8000632:	2041      	movs	r0, #65	; 0x41
 8000634:	f7ff fe30 	bl	8000298 <Gpio_WritePin>
            Gpio_WritePin(GPIO_A, 6, LOW);
 8000638:	2200      	movs	r2, #0
 800063a:	2106      	movs	r1, #6
 800063c:	2041      	movs	r0, #65	; 0x41
 800063e:	f7ff fe2b 	bl	8000298 <Gpio_WritePin>
            break;
 8000642:	e11f      	b.n	8000884 <Seven_Segment_Display+0x310>
        case 2:
            Gpio_WritePin(GPIO_A, 0, HIGH);
 8000644:	2201      	movs	r2, #1
 8000646:	2100      	movs	r1, #0
 8000648:	2041      	movs	r0, #65	; 0x41
 800064a:	f7ff fe25 	bl	8000298 <Gpio_WritePin>
            Gpio_WritePin(GPIO_A, 1, HIGH);
 800064e:	2201      	movs	r2, #1
 8000650:	2101      	movs	r1, #1
 8000652:	2041      	movs	r0, #65	; 0x41
 8000654:	f7ff fe20 	bl	8000298 <Gpio_WritePin>
            Gpio_WritePin(GPIO_A, 2, LOW);
 8000658:	2200      	movs	r2, #0
 800065a:	2102      	movs	r1, #2
 800065c:	2041      	movs	r0, #65	; 0x41
 800065e:	f7ff fe1b 	bl	8000298 <Gpio_WritePin>
            Gpio_WritePin(GPIO_A, 3, HIGH);
 8000662:	2201      	movs	r2, #1
 8000664:	2103      	movs	r1, #3
 8000666:	2041      	movs	r0, #65	; 0x41
 8000668:	f7ff fe16 	bl	8000298 <Gpio_WritePin>
            Gpio_WritePin(GPIO_A, 4, HIGH);
 800066c:	2201      	movs	r2, #1
 800066e:	2104      	movs	r1, #4
 8000670:	2041      	movs	r0, #65	; 0x41
 8000672:	f7ff fe11 	bl	8000298 <Gpio_WritePin>
            Gpio_WritePin(GPIO_A, 5, LOW);
 8000676:	2200      	movs	r2, #0
 8000678:	2105      	movs	r1, #5
 800067a:	2041      	movs	r0, #65	; 0x41
 800067c:	f7ff fe0c 	bl	8000298 <Gpio_WritePin>
            Gpio_WritePin(GPIO_A, 6, HIGH);
 8000680:	2201      	movs	r2, #1
 8000682:	2106      	movs	r1, #6
 8000684:	2041      	movs	r0, #65	; 0x41
 8000686:	f7ff fe07 	bl	8000298 <Gpio_WritePin>
            break;
 800068a:	e0fb      	b.n	8000884 <Seven_Segment_Display+0x310>
        case 3:
            Gpio_WritePin(GPIO_A, 0, HIGH);
 800068c:	2201      	movs	r2, #1
 800068e:	2100      	movs	r1, #0
 8000690:	2041      	movs	r0, #65	; 0x41
 8000692:	f7ff fe01 	bl	8000298 <Gpio_WritePin>
            Gpio_WritePin(GPIO_A, 1, HIGH);
 8000696:	2201      	movs	r2, #1
 8000698:	2101      	movs	r1, #1
 800069a:	2041      	movs	r0, #65	; 0x41
 800069c:	f7ff fdfc 	bl	8000298 <Gpio_WritePin>
            Gpio_WritePin(GPIO_A, 2, HIGH);
 80006a0:	2201      	movs	r2, #1
 80006a2:	2102      	movs	r1, #2
 80006a4:	2041      	movs	r0, #65	; 0x41
 80006a6:	f7ff fdf7 	bl	8000298 <Gpio_WritePin>
            Gpio_WritePin(GPIO_A, 3, HIGH);
 80006aa:	2201      	movs	r2, #1
 80006ac:	2103      	movs	r1, #3
 80006ae:	2041      	movs	r0, #65	; 0x41
 80006b0:	f7ff fdf2 	bl	8000298 <Gpio_WritePin>
            Gpio_WritePin(GPIO_A, 4, LOW);
 80006b4:	2200      	movs	r2, #0
 80006b6:	2104      	movs	r1, #4
 80006b8:	2041      	movs	r0, #65	; 0x41
 80006ba:	f7ff fded 	bl	8000298 <Gpio_WritePin>
            Gpio_WritePin(GPIO_A, 5, LOW);
 80006be:	2200      	movs	r2, #0
 80006c0:	2105      	movs	r1, #5
 80006c2:	2041      	movs	r0, #65	; 0x41
 80006c4:	f7ff fde8 	bl	8000298 <Gpio_WritePin>
            Gpio_WritePin(GPIO_A, 6, HIGH);
 80006c8:	2201      	movs	r2, #1
 80006ca:	2106      	movs	r1, #6
 80006cc:	2041      	movs	r0, #65	; 0x41
 80006ce:	f7ff fde3 	bl	8000298 <Gpio_WritePin>
            break;
 80006d2:	e0d7      	b.n	8000884 <Seven_Segment_Display+0x310>
        case 4:
            Gpio_WritePin(GPIO_A, 0, LOW);
 80006d4:	2200      	movs	r2, #0
 80006d6:	2100      	movs	r1, #0
 80006d8:	2041      	movs	r0, #65	; 0x41
 80006da:	f7ff fddd 	bl	8000298 <Gpio_WritePin>
            Gpio_WritePin(GPIO_A, 1, HIGH);
 80006de:	2201      	movs	r2, #1
 80006e0:	2101      	movs	r1, #1
 80006e2:	2041      	movs	r0, #65	; 0x41
 80006e4:	f7ff fdd8 	bl	8000298 <Gpio_WritePin>
            Gpio_WritePin(GPIO_A, 2, HIGH);
 80006e8:	2201      	movs	r2, #1
 80006ea:	2102      	movs	r1, #2
 80006ec:	2041      	movs	r0, #65	; 0x41
 80006ee:	f7ff fdd3 	bl	8000298 <Gpio_WritePin>
            Gpio_WritePin(GPIO_A, 3, LOW);
 80006f2:	2200      	movs	r2, #0
 80006f4:	2103      	movs	r1, #3
 80006f6:	2041      	movs	r0, #65	; 0x41
 80006f8:	f7ff fdce 	bl	8000298 <Gpio_WritePin>
            Gpio_WritePin(GPIO_A, 4, LOW);
 80006fc:	2200      	movs	r2, #0
 80006fe:	2104      	movs	r1, #4
 8000700:	2041      	movs	r0, #65	; 0x41
 8000702:	f7ff fdc9 	bl	8000298 <Gpio_WritePin>
            Gpio_WritePin(GPIO_A, 5, HIGH);
 8000706:	2201      	movs	r2, #1
 8000708:	2105      	movs	r1, #5
 800070a:	2041      	movs	r0, #65	; 0x41
 800070c:	f7ff fdc4 	bl	8000298 <Gpio_WritePin>
            Gpio_WritePin(GPIO_A, 6, HIGH);
 8000710:	2201      	movs	r2, #1
 8000712:	2106      	movs	r1, #6
 8000714:	2041      	movs	r0, #65	; 0x41
 8000716:	f7ff fdbf 	bl	8000298 <Gpio_WritePin>
            break;
 800071a:	e0b3      	b.n	8000884 <Seven_Segment_Display+0x310>
        case 5:
            Gpio_WritePin(GPIO_A, 0, HIGH);
 800071c:	2201      	movs	r2, #1
 800071e:	2100      	movs	r1, #0
 8000720:	2041      	movs	r0, #65	; 0x41
 8000722:	f7ff fdb9 	bl	8000298 <Gpio_WritePin>
            Gpio_WritePin(GPIO_A, 1, LOW);
 8000726:	2200      	movs	r2, #0
 8000728:	2101      	movs	r1, #1
 800072a:	2041      	movs	r0, #65	; 0x41
 800072c:	f7ff fdb4 	bl	8000298 <Gpio_WritePin>
            Gpio_WritePin(GPIO_A, 2, HIGH);
 8000730:	2201      	movs	r2, #1
 8000732:	2102      	movs	r1, #2
 8000734:	2041      	movs	r0, #65	; 0x41
 8000736:	f7ff fdaf 	bl	8000298 <Gpio_WritePin>
            Gpio_WritePin(GPIO_A, 3, HIGH);
 800073a:	2201      	movs	r2, #1
 800073c:	2103      	movs	r1, #3
 800073e:	2041      	movs	r0, #65	; 0x41
 8000740:	f7ff fdaa 	bl	8000298 <Gpio_WritePin>
            Gpio_WritePin(GPIO_A, 4, LOW);
 8000744:	2200      	movs	r2, #0
 8000746:	2104      	movs	r1, #4
 8000748:	2041      	movs	r0, #65	; 0x41
 800074a:	f7ff fda5 	bl	8000298 <Gpio_WritePin>
            Gpio_WritePin(GPIO_A, 5, HIGH);
 800074e:	2201      	movs	r2, #1
 8000750:	2105      	movs	r1, #5
 8000752:	2041      	movs	r0, #65	; 0x41
 8000754:	f7ff fda0 	bl	8000298 <Gpio_WritePin>
            Gpio_WritePin(GPIO_A, 6, HIGH);
 8000758:	2201      	movs	r2, #1
 800075a:	2106      	movs	r1, #6
 800075c:	2041      	movs	r0, #65	; 0x41
 800075e:	f7ff fd9b 	bl	8000298 <Gpio_WritePin>
            break;
 8000762:	e08f      	b.n	8000884 <Seven_Segment_Display+0x310>
        case 6:
            Gpio_WritePin(GPIO_A, 0, HIGH);
 8000764:	2201      	movs	r2, #1
 8000766:	2100      	movs	r1, #0
 8000768:	2041      	movs	r0, #65	; 0x41
 800076a:	f7ff fd95 	bl	8000298 <Gpio_WritePin>
            Gpio_WritePin(GPIO_A, 1, LOW);
 800076e:	2200      	movs	r2, #0
 8000770:	2101      	movs	r1, #1
 8000772:	2041      	movs	r0, #65	; 0x41
 8000774:	f7ff fd90 	bl	8000298 <Gpio_WritePin>
            Gpio_WritePin(GPIO_A, 2, HIGH);
 8000778:	2201      	movs	r2, #1
 800077a:	2102      	movs	r1, #2
 800077c:	2041      	movs	r0, #65	; 0x41
 800077e:	f7ff fd8b 	bl	8000298 <Gpio_WritePin>
            Gpio_WritePin(GPIO_A, 3, HIGH);
 8000782:	2201      	movs	r2, #1
 8000784:	2103      	movs	r1, #3
 8000786:	2041      	movs	r0, #65	; 0x41
 8000788:	f7ff fd86 	bl	8000298 <Gpio_WritePin>
            Gpio_WritePin(GPIO_A, 4, HIGH);
 800078c:	2201      	movs	r2, #1
 800078e:	2104      	movs	r1, #4
 8000790:	2041      	movs	r0, #65	; 0x41
 8000792:	f7ff fd81 	bl	8000298 <Gpio_WritePin>
            Gpio_WritePin(GPIO_A, 5, HIGH);
 8000796:	2201      	movs	r2, #1
 8000798:	2105      	movs	r1, #5
 800079a:	2041      	movs	r0, #65	; 0x41
 800079c:	f7ff fd7c 	bl	8000298 <Gpio_WritePin>
            Gpio_WritePin(GPIO_A, 6, HIGH);
 80007a0:	2201      	movs	r2, #1
 80007a2:	2106      	movs	r1, #6
 80007a4:	2041      	movs	r0, #65	; 0x41
 80007a6:	f7ff fd77 	bl	8000298 <Gpio_WritePin>
            break;
 80007aa:	e06b      	b.n	8000884 <Seven_Segment_Display+0x310>
        case 7:
            Gpio_WritePin(GPIO_A, 0, HIGH);
 80007ac:	2201      	movs	r2, #1
 80007ae:	2100      	movs	r1, #0
 80007b0:	2041      	movs	r0, #65	; 0x41
 80007b2:	f7ff fd71 	bl	8000298 <Gpio_WritePin>
            Gpio_WritePin(GPIO_A, 1, HIGH);
 80007b6:	2201      	movs	r2, #1
 80007b8:	2101      	movs	r1, #1
 80007ba:	2041      	movs	r0, #65	; 0x41
 80007bc:	f7ff fd6c 	bl	8000298 <Gpio_WritePin>
            Gpio_WritePin(GPIO_A, 2, HIGH);
 80007c0:	2201      	movs	r2, #1
 80007c2:	2102      	movs	r1, #2
 80007c4:	2041      	movs	r0, #65	; 0x41
 80007c6:	f7ff fd67 	bl	8000298 <Gpio_WritePin>
            Gpio_WritePin(GPIO_A, 3, LOW);
 80007ca:	2200      	movs	r2, #0
 80007cc:	2103      	movs	r1, #3
 80007ce:	2041      	movs	r0, #65	; 0x41
 80007d0:	f7ff fd62 	bl	8000298 <Gpio_WritePin>
            Gpio_WritePin(GPIO_A, 4, LOW);
 80007d4:	2200      	movs	r2, #0
 80007d6:	2104      	movs	r1, #4
 80007d8:	2041      	movs	r0, #65	; 0x41
 80007da:	f7ff fd5d 	bl	8000298 <Gpio_WritePin>
            Gpio_WritePin(GPIO_A, 5, LOW);
 80007de:	2200      	movs	r2, #0
 80007e0:	2105      	movs	r1, #5
 80007e2:	2041      	movs	r0, #65	; 0x41
 80007e4:	f7ff fd58 	bl	8000298 <Gpio_WritePin>
            Gpio_WritePin(GPIO_A, 6, LOW);
 80007e8:	2200      	movs	r2, #0
 80007ea:	2106      	movs	r1, #6
 80007ec:	2041      	movs	r0, #65	; 0x41
 80007ee:	f7ff fd53 	bl	8000298 <Gpio_WritePin>
            break;
 80007f2:	e047      	b.n	8000884 <Seven_Segment_Display+0x310>
        case 8:
            Gpio_WritePin(GPIO_A, 0, HIGH);
 80007f4:	2201      	movs	r2, #1
 80007f6:	2100      	movs	r1, #0
 80007f8:	2041      	movs	r0, #65	; 0x41
 80007fa:	f7ff fd4d 	bl	8000298 <Gpio_WritePin>
            Gpio_WritePin(GPIO_A, 1, HIGH);
 80007fe:	2201      	movs	r2, #1
 8000800:	2101      	movs	r1, #1
 8000802:	2041      	movs	r0, #65	; 0x41
 8000804:	f7ff fd48 	bl	8000298 <Gpio_WritePin>
            Gpio_WritePin(GPIO_A, 2, HIGH);
 8000808:	2201      	movs	r2, #1
 800080a:	2102      	movs	r1, #2
 800080c:	2041      	movs	r0, #65	; 0x41
 800080e:	f7ff fd43 	bl	8000298 <Gpio_WritePin>
            Gpio_WritePin(GPIO_A, 3, HIGH);
 8000812:	2201      	movs	r2, #1
 8000814:	2103      	movs	r1, #3
 8000816:	2041      	movs	r0, #65	; 0x41
 8000818:	f7ff fd3e 	bl	8000298 <Gpio_WritePin>
            Gpio_WritePin(GPIO_A, 4, HIGH);
 800081c:	2201      	movs	r2, #1
 800081e:	2104      	movs	r1, #4
 8000820:	2041      	movs	r0, #65	; 0x41
 8000822:	f7ff fd39 	bl	8000298 <Gpio_WritePin>
            Gpio_WritePin(GPIO_A, 5, HIGH);
 8000826:	2201      	movs	r2, #1
 8000828:	2105      	movs	r1, #5
 800082a:	2041      	movs	r0, #65	; 0x41
 800082c:	f7ff fd34 	bl	8000298 <Gpio_WritePin>
            Gpio_WritePin(GPIO_A, 6, HIGH);
 8000830:	2201      	movs	r2, #1
 8000832:	2106      	movs	r1, #6
 8000834:	2041      	movs	r0, #65	; 0x41
 8000836:	f7ff fd2f 	bl	8000298 <Gpio_WritePin>
            break;
 800083a:	e023      	b.n	8000884 <Seven_Segment_Display+0x310>
        case 9:
            Gpio_WritePin(GPIO_A, 0, HIGH);
 800083c:	2201      	movs	r2, #1
 800083e:	2100      	movs	r1, #0
 8000840:	2041      	movs	r0, #65	; 0x41
 8000842:	f7ff fd29 	bl	8000298 <Gpio_WritePin>
            Gpio_WritePin(GPIO_A, 1, HIGH);
 8000846:	2201      	movs	r2, #1
 8000848:	2101      	movs	r1, #1
 800084a:	2041      	movs	r0, #65	; 0x41
 800084c:	f7ff fd24 	bl	8000298 <Gpio_WritePin>
            Gpio_WritePin(GPIO_A, 2, HIGH);
 8000850:	2201      	movs	r2, #1
 8000852:	2102      	movs	r1, #2
 8000854:	2041      	movs	r0, #65	; 0x41
 8000856:	f7ff fd1f 	bl	8000298 <Gpio_WritePin>
            Gpio_WritePin(GPIO_A, 3, LOW);
 800085a:	2200      	movs	r2, #0
 800085c:	2103      	movs	r1, #3
 800085e:	2041      	movs	r0, #65	; 0x41
 8000860:	f7ff fd1a 	bl	8000298 <Gpio_WritePin>
            Gpio_WritePin(GPIO_A, 4, LOW);
 8000864:	2200      	movs	r2, #0
 8000866:	2104      	movs	r1, #4
 8000868:	2041      	movs	r0, #65	; 0x41
 800086a:	f7ff fd15 	bl	8000298 <Gpio_WritePin>
            Gpio_WritePin(GPIO_A, 5, HIGH);
 800086e:	2201      	movs	r2, #1
 8000870:	2105      	movs	r1, #5
 8000872:	2041      	movs	r0, #65	; 0x41
 8000874:	f7ff fd10 	bl	8000298 <Gpio_WritePin>
            Gpio_WritePin(GPIO_A, 6, HIGH);
 8000878:	2201      	movs	r2, #1
 800087a:	2106      	movs	r1, #6
 800087c:	2041      	movs	r0, #65	; 0x41
 800087e:	f7ff fd0b 	bl	8000298 <Gpio_WritePin>
            break;
 8000882:	bf00      	nop
    }
}
 8000884:	bf00      	nop
 8000886:	3708      	adds	r7, #8
 8000888:	46bd      	mov	sp, r7
 800088a:	bd80      	pop	{r7, pc}

0800088c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800088c:	480d      	ldr	r0, [pc, #52]	; (80008c4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800088e:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000890:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000894:	480c      	ldr	r0, [pc, #48]	; (80008c8 <LoopForever+0x6>)
  ldr r1, =_edata
 8000896:	490d      	ldr	r1, [pc, #52]	; (80008cc <LoopForever+0xa>)
  ldr r2, =_sidata
 8000898:	4a0d      	ldr	r2, [pc, #52]	; (80008d0 <LoopForever+0xe>)
  movs r3, #0
 800089a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800089c:	e002      	b.n	80008a4 <LoopCopyDataInit>

0800089e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800089e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80008a0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80008a2:	3304      	adds	r3, #4

080008a4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80008a4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80008a6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80008a8:	d3f9      	bcc.n	800089e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80008aa:	4a0a      	ldr	r2, [pc, #40]	; (80008d4 <LoopForever+0x12>)
  ldr r4, =_ebss
 80008ac:	4c0a      	ldr	r4, [pc, #40]	; (80008d8 <LoopForever+0x16>)
  movs r3, #0
 80008ae:	2300      	movs	r3, #0
  b LoopFillZerobss
 80008b0:	e001      	b.n	80008b6 <LoopFillZerobss>

080008b2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80008b2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80008b4:	3204      	adds	r2, #4

080008b6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80008b6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80008b8:	d3fb      	bcc.n	80008b2 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80008ba:	f000 f913 	bl	8000ae4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80008be:	f7ff fda5 	bl	800040c <main>

080008c2 <LoopForever>:

LoopForever:
    b LoopForever
 80008c2:	e7fe      	b.n	80008c2 <LoopForever>
  ldr   r0, =_estack
 80008c4:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 80008c8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80008cc:	2000002c 	.word	0x2000002c
  ldr r2, =_sidata
 80008d0:	08000b4c 	.word	0x08000b4c
  ldr r2, =_sbss
 80008d4:	2000002c 	.word	0x2000002c
  ldr r4, =_ebss
 80008d8:	2000004c 	.word	0x2000004c

080008dc <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80008dc:	e7fe      	b.n	80008dc <ADC_IRQHandler>
	...

080008e0 <Exti_Init>:
};


void Exti_Init(EXTI_PORT portID,
		uint8 ExtiPin,EXTI_Edge edge
		){
 80008e0:	b580      	push	{r7, lr}
 80008e2:	b084      	sub	sp, #16
 80008e4:	af00      	add	r7, sp, #0
 80008e6:	4603      	mov	r3, r0
 80008e8:	71fb      	strb	r3, [r7, #7]
 80008ea:	460b      	mov	r3, r1
 80008ec:	71bb      	strb	r3, [r7, #6]
 80008ee:	4613      	mov	r3, r2
 80008f0:	717b      	strb	r3, [r7, #5]
	//	 EXTICR1 --> bits {0, 1, 2 ,3}
	//	 EXTICR2 --> bits {4, 5, 6 ,7}
	//	 EXTICR3 --> bits {8, 9, 10 ,11}
	//	 EXTICR4 --> bits {12, 13, 14 ,15}

	if (ExtiPin < 4) {
 80008f2:	79bb      	ldrb	r3, [r7, #6]
 80008f4:	2b03      	cmp	r3, #3
 80008f6:	d81b      	bhi.n	8000930 <Exti_Init+0x50>
		SYSCFG->EXTICR1 &= ~(portID << (ExtiPin%4 * 4));
 80008f8:	4b5f      	ldr	r3, [pc, #380]	; (8000a78 <Exti_Init+0x198>)
 80008fa:	689b      	ldr	r3, [r3, #8]
 80008fc:	79f9      	ldrb	r1, [r7, #7]
 80008fe:	79ba      	ldrb	r2, [r7, #6]
 8000900:	f002 0203 	and.w	r2, r2, #3
 8000904:	0092      	lsls	r2, r2, #2
 8000906:	fa01 f202 	lsl.w	r2, r1, r2
 800090a:	43d2      	mvns	r2, r2
 800090c:	4611      	mov	r1, r2
 800090e:	4a5a      	ldr	r2, [pc, #360]	; (8000a78 <Exti_Init+0x198>)
 8000910:	400b      	ands	r3, r1
 8000912:	6093      	str	r3, [r2, #8]
		SYSCFG->EXTICR1 |=  (portID << (ExtiPin%4 * 4));
 8000914:	4b58      	ldr	r3, [pc, #352]	; (8000a78 <Exti_Init+0x198>)
 8000916:	689b      	ldr	r3, [r3, #8]
 8000918:	79f9      	ldrb	r1, [r7, #7]
 800091a:	79ba      	ldrb	r2, [r7, #6]
 800091c:	f002 0203 	and.w	r2, r2, #3
 8000920:	0092      	lsls	r2, r2, #2
 8000922:	fa01 f202 	lsl.w	r2, r1, r2
 8000926:	4611      	mov	r1, r2
 8000928:	4a53      	ldr	r2, [pc, #332]	; (8000a78 <Exti_Init+0x198>)
 800092a:	430b      	orrs	r3, r1
 800092c:	6093      	str	r3, [r2, #8]
 800092e:	e064      	b.n	80009fa <Exti_Init+0x11a>
	}
	else if (ExtiPin >= 4 && ExtiPin < 8){
 8000930:	79bb      	ldrb	r3, [r7, #6]
 8000932:	2b03      	cmp	r3, #3
 8000934:	d91e      	bls.n	8000974 <Exti_Init+0x94>
 8000936:	79bb      	ldrb	r3, [r7, #6]
 8000938:	2b07      	cmp	r3, #7
 800093a:	d81b      	bhi.n	8000974 <Exti_Init+0x94>
		SYSCFG->EXTICR2 &= ~(portID << ( (ExtiPin%4) * 4));
 800093c:	4b4e      	ldr	r3, [pc, #312]	; (8000a78 <Exti_Init+0x198>)
 800093e:	68db      	ldr	r3, [r3, #12]
 8000940:	79f9      	ldrb	r1, [r7, #7]
 8000942:	79ba      	ldrb	r2, [r7, #6]
 8000944:	f002 0203 	and.w	r2, r2, #3
 8000948:	0092      	lsls	r2, r2, #2
 800094a:	fa01 f202 	lsl.w	r2, r1, r2
 800094e:	43d2      	mvns	r2, r2
 8000950:	4611      	mov	r1, r2
 8000952:	4a49      	ldr	r2, [pc, #292]	; (8000a78 <Exti_Init+0x198>)
 8000954:	400b      	ands	r3, r1
 8000956:	60d3      	str	r3, [r2, #12]
		SYSCFG->EXTICR2 |=  (portID << ( (ExtiPin%4) * 4));
 8000958:	4b47      	ldr	r3, [pc, #284]	; (8000a78 <Exti_Init+0x198>)
 800095a:	68db      	ldr	r3, [r3, #12]
 800095c:	79f9      	ldrb	r1, [r7, #7]
 800095e:	79ba      	ldrb	r2, [r7, #6]
 8000960:	f002 0203 	and.w	r2, r2, #3
 8000964:	0092      	lsls	r2, r2, #2
 8000966:	fa01 f202 	lsl.w	r2, r1, r2
 800096a:	4611      	mov	r1, r2
 800096c:	4a42      	ldr	r2, [pc, #264]	; (8000a78 <Exti_Init+0x198>)
 800096e:	430b      	orrs	r3, r1
 8000970:	60d3      	str	r3, [r2, #12]
 8000972:	e042      	b.n	80009fa <Exti_Init+0x11a>
	}
	else if (ExtiPin >= 8 && ExtiPin < 12){
 8000974:	79bb      	ldrb	r3, [r7, #6]
 8000976:	2b07      	cmp	r3, #7
 8000978:	d91e      	bls.n	80009b8 <Exti_Init+0xd8>
 800097a:	79bb      	ldrb	r3, [r7, #6]
 800097c:	2b0b      	cmp	r3, #11
 800097e:	d81b      	bhi.n	80009b8 <Exti_Init+0xd8>
		SYSCFG->EXTICR3 &= ~(portID << ( (ExtiPin%4) * 4));
 8000980:	4b3d      	ldr	r3, [pc, #244]	; (8000a78 <Exti_Init+0x198>)
 8000982:	691b      	ldr	r3, [r3, #16]
 8000984:	79f9      	ldrb	r1, [r7, #7]
 8000986:	79ba      	ldrb	r2, [r7, #6]
 8000988:	f002 0203 	and.w	r2, r2, #3
 800098c:	0092      	lsls	r2, r2, #2
 800098e:	fa01 f202 	lsl.w	r2, r1, r2
 8000992:	43d2      	mvns	r2, r2
 8000994:	4611      	mov	r1, r2
 8000996:	4a38      	ldr	r2, [pc, #224]	; (8000a78 <Exti_Init+0x198>)
 8000998:	400b      	ands	r3, r1
 800099a:	6113      	str	r3, [r2, #16]
		SYSCFG->EXTICR3 |=  (portID << ( (ExtiPin%4) * 4));
 800099c:	4b36      	ldr	r3, [pc, #216]	; (8000a78 <Exti_Init+0x198>)
 800099e:	691b      	ldr	r3, [r3, #16]
 80009a0:	79f9      	ldrb	r1, [r7, #7]
 80009a2:	79ba      	ldrb	r2, [r7, #6]
 80009a4:	f002 0203 	and.w	r2, r2, #3
 80009a8:	0092      	lsls	r2, r2, #2
 80009aa:	fa01 f202 	lsl.w	r2, r1, r2
 80009ae:	4611      	mov	r1, r2
 80009b0:	4a31      	ldr	r2, [pc, #196]	; (8000a78 <Exti_Init+0x198>)
 80009b2:	430b      	orrs	r3, r1
 80009b4:	6113      	str	r3, [r2, #16]
 80009b6:	e020      	b.n	80009fa <Exti_Init+0x11a>
	}
	else if (ExtiPin >= 12 && ExtiPin < 16){
 80009b8:	79bb      	ldrb	r3, [r7, #6]
 80009ba:	2b0b      	cmp	r3, #11
 80009bc:	d91d      	bls.n	80009fa <Exti_Init+0x11a>
 80009be:	79bb      	ldrb	r3, [r7, #6]
 80009c0:	2b0f      	cmp	r3, #15
 80009c2:	d81a      	bhi.n	80009fa <Exti_Init+0x11a>
		SYSCFG->EXTICR4 &= ~(portID << ( (ExtiPin%4) * 4));
 80009c4:	4b2c      	ldr	r3, [pc, #176]	; (8000a78 <Exti_Init+0x198>)
 80009c6:	695b      	ldr	r3, [r3, #20]
 80009c8:	79f9      	ldrb	r1, [r7, #7]
 80009ca:	79ba      	ldrb	r2, [r7, #6]
 80009cc:	f002 0203 	and.w	r2, r2, #3
 80009d0:	0092      	lsls	r2, r2, #2
 80009d2:	fa01 f202 	lsl.w	r2, r1, r2
 80009d6:	43d2      	mvns	r2, r2
 80009d8:	4611      	mov	r1, r2
 80009da:	4a27      	ldr	r2, [pc, #156]	; (8000a78 <Exti_Init+0x198>)
 80009dc:	400b      	ands	r3, r1
 80009de:	6153      	str	r3, [r2, #20]
		SYSCFG->EXTICR4 |=  (portID << ( (ExtiPin%4) * 4));
 80009e0:	4b25      	ldr	r3, [pc, #148]	; (8000a78 <Exti_Init+0x198>)
 80009e2:	695b      	ldr	r3, [r3, #20]
 80009e4:	79f9      	ldrb	r1, [r7, #7]
 80009e6:	79ba      	ldrb	r2, [r7, #6]
 80009e8:	f002 0203 	and.w	r2, r2, #3
 80009ec:	0092      	lsls	r2, r2, #2
 80009ee:	fa01 f202 	lsl.w	r2, r1, r2
 80009f2:	4611      	mov	r1, r2
 80009f4:	4a20      	ldr	r2, [pc, #128]	; (8000a78 <Exti_Init+0x198>)
 80009f6:	430b      	orrs	r3, r1
 80009f8:	6153      	str	r3, [r2, #20]
	}


	NVIC_EXTI_Lines NvicLine = line[ExtiPin];
 80009fa:	79bb      	ldrb	r3, [r7, #6]
 80009fc:	4a1f      	ldr	r2, [pc, #124]	; (8000a7c <Exti_Init+0x19c>)
 80009fe:	5cd3      	ldrb	r3, [r2, r3]
 8000a00:	73fb      	strb	r3, [r7, #15]

	Nvic_EnableInterrupt(NvicLine);
 8000a02:	7bfb      	ldrb	r3, [r7, #15]
 8000a04:	4618      	mov	r0, r3
 8000a06:	f7ff fc73 	bl	80002f0 <Nvic_EnableInterrupt>
	//	 Select the edge
	//	 case :: falling edge
	//	 case :: rising edge
	//	 case :: both edges

	switch (edge) {
 8000a0a:	797b      	ldrb	r3, [r7, #5]
 8000a0c:	2b01      	cmp	r3, #1
 8000a0e:	d00f      	beq.n	8000a30 <Exti_Init+0x150>
 8000a10:	2b02      	cmp	r3, #2
 8000a12:	d018      	beq.n	8000a46 <Exti_Init+0x166>
 8000a14:	2b00      	cmp	r3, #0
 8000a16:	d000      	beq.n	8000a1a <Exti_Init+0x13a>
	case EXTI_FALLING_RISING_EDGES:
		SET_BIT(EXTI->FTSR, ExtiPin);
		SET_BIT(EXTI->RTSR, ExtiPin);
		break;
	}
}
 8000a18:	e02a      	b.n	8000a70 <Exti_Init+0x190>
		SET_BIT(EXTI->FTSR, ExtiPin);
 8000a1a:	4b19      	ldr	r3, [pc, #100]	; (8000a80 <Exti_Init+0x1a0>)
 8000a1c:	68db      	ldr	r3, [r3, #12]
 8000a1e:	79ba      	ldrb	r2, [r7, #6]
 8000a20:	2101      	movs	r1, #1
 8000a22:	fa01 f202 	lsl.w	r2, r1, r2
 8000a26:	4611      	mov	r1, r2
 8000a28:	4a15      	ldr	r2, [pc, #84]	; (8000a80 <Exti_Init+0x1a0>)
 8000a2a:	430b      	orrs	r3, r1
 8000a2c:	60d3      	str	r3, [r2, #12]
		break;
 8000a2e:	e01f      	b.n	8000a70 <Exti_Init+0x190>
		SET_BIT(EXTI->RTSR, ExtiPin);
 8000a30:	4b13      	ldr	r3, [pc, #76]	; (8000a80 <Exti_Init+0x1a0>)
 8000a32:	689b      	ldr	r3, [r3, #8]
 8000a34:	79ba      	ldrb	r2, [r7, #6]
 8000a36:	2101      	movs	r1, #1
 8000a38:	fa01 f202 	lsl.w	r2, r1, r2
 8000a3c:	4611      	mov	r1, r2
 8000a3e:	4a10      	ldr	r2, [pc, #64]	; (8000a80 <Exti_Init+0x1a0>)
 8000a40:	430b      	orrs	r3, r1
 8000a42:	6093      	str	r3, [r2, #8]
		break;
 8000a44:	e014      	b.n	8000a70 <Exti_Init+0x190>
		SET_BIT(EXTI->FTSR, ExtiPin);
 8000a46:	4b0e      	ldr	r3, [pc, #56]	; (8000a80 <Exti_Init+0x1a0>)
 8000a48:	68db      	ldr	r3, [r3, #12]
 8000a4a:	79ba      	ldrb	r2, [r7, #6]
 8000a4c:	2101      	movs	r1, #1
 8000a4e:	fa01 f202 	lsl.w	r2, r1, r2
 8000a52:	4611      	mov	r1, r2
 8000a54:	4a0a      	ldr	r2, [pc, #40]	; (8000a80 <Exti_Init+0x1a0>)
 8000a56:	430b      	orrs	r3, r1
 8000a58:	60d3      	str	r3, [r2, #12]
		SET_BIT(EXTI->RTSR, ExtiPin);
 8000a5a:	4b09      	ldr	r3, [pc, #36]	; (8000a80 <Exti_Init+0x1a0>)
 8000a5c:	689b      	ldr	r3, [r3, #8]
 8000a5e:	79ba      	ldrb	r2, [r7, #6]
 8000a60:	2101      	movs	r1, #1
 8000a62:	fa01 f202 	lsl.w	r2, r1, r2
 8000a66:	4611      	mov	r1, r2
 8000a68:	4a05      	ldr	r2, [pc, #20]	; (8000a80 <Exti_Init+0x1a0>)
 8000a6a:	430b      	orrs	r3, r1
 8000a6c:	6093      	str	r3, [r2, #8]
		break;
 8000a6e:	bf00      	nop
}
 8000a70:	bf00      	nop
 8000a72:	3710      	adds	r7, #16
 8000a74:	46bd      	mov	sp, r7
 8000a76:	bd80      	pop	{r7, pc}
 8000a78:	40013800 	.word	0x40013800
 8000a7c:	20000014 	.word	0x20000014
 8000a80:	40013c00 	.word	0x40013c00

08000a84 <Exti_Enable>:



void Exti_Enable(uint8 ExtiPin){
 8000a84:	b480      	push	{r7}
 8000a86:	b083      	sub	sp, #12
 8000a88:	af00      	add	r7, sp, #0
 8000a8a:	4603      	mov	r3, r0
 8000a8c:	71fb      	strb	r3, [r7, #7]
	SET_BIT(EXTI->IMR, ExtiPin);
 8000a8e:	4b08      	ldr	r3, [pc, #32]	; (8000ab0 <Exti_Enable+0x2c>)
 8000a90:	681b      	ldr	r3, [r3, #0]
 8000a92:	79fa      	ldrb	r2, [r7, #7]
 8000a94:	2101      	movs	r1, #1
 8000a96:	fa01 f202 	lsl.w	r2, r1, r2
 8000a9a:	4611      	mov	r1, r2
 8000a9c:	4a04      	ldr	r2, [pc, #16]	; (8000ab0 <Exti_Enable+0x2c>)
 8000a9e:	430b      	orrs	r3, r1
 8000aa0:	6013      	str	r3, [r2, #0]
}
 8000aa2:	bf00      	nop
 8000aa4:	370c      	adds	r7, #12
 8000aa6:	46bd      	mov	sp, r7
 8000aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aac:	4770      	bx	lr
 8000aae:	bf00      	nop
 8000ab0:	40013c00 	.word	0x40013c00

08000ab4 <Exti_HandlerPendingFlag>:
void Exti_Disable(uint8 ExtiPin){
	CLEAR_BIT(EXTI->IMR, ExtiPin);
}


void Exti_HandlerPendingFlag(uint8 ExtiPin){
 8000ab4:	b480      	push	{r7}
 8000ab6:	b083      	sub	sp, #12
 8000ab8:	af00      	add	r7, sp, #0
 8000aba:	4603      	mov	r3, r0
 8000abc:	71fb      	strb	r3, [r7, #7]
	SET_BIT(EXTI->PR, ExtiPin);
 8000abe:	4b08      	ldr	r3, [pc, #32]	; (8000ae0 <Exti_HandlerPendingFlag+0x2c>)
 8000ac0:	695b      	ldr	r3, [r3, #20]
 8000ac2:	79fa      	ldrb	r2, [r7, #7]
 8000ac4:	2101      	movs	r1, #1
 8000ac6:	fa01 f202 	lsl.w	r2, r1, r2
 8000aca:	4611      	mov	r1, r2
 8000acc:	4a04      	ldr	r2, [pc, #16]	; (8000ae0 <Exti_HandlerPendingFlag+0x2c>)
 8000ace:	430b      	orrs	r3, r1
 8000ad0:	6153      	str	r3, [r2, #20]
}
 8000ad2:	bf00      	nop
 8000ad4:	370c      	adds	r7, #12
 8000ad6:	46bd      	mov	sp, r7
 8000ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000adc:	4770      	bx	lr
 8000ade:	bf00      	nop
 8000ae0:	40013c00 	.word	0x40013c00

08000ae4 <__libc_init_array>:
 8000ae4:	b570      	push	{r4, r5, r6, lr}
 8000ae6:	4e0d      	ldr	r6, [pc, #52]	; (8000b1c <__libc_init_array+0x38>)
 8000ae8:	4c0d      	ldr	r4, [pc, #52]	; (8000b20 <__libc_init_array+0x3c>)
 8000aea:	1ba4      	subs	r4, r4, r6
 8000aec:	10a4      	asrs	r4, r4, #2
 8000aee:	2500      	movs	r5, #0
 8000af0:	42a5      	cmp	r5, r4
 8000af2:	d109      	bne.n	8000b08 <__libc_init_array+0x24>
 8000af4:	4e0b      	ldr	r6, [pc, #44]	; (8000b24 <__libc_init_array+0x40>)
 8000af6:	4c0c      	ldr	r4, [pc, #48]	; (8000b28 <__libc_init_array+0x44>)
 8000af8:	f000 f818 	bl	8000b2c <_init>
 8000afc:	1ba4      	subs	r4, r4, r6
 8000afe:	10a4      	asrs	r4, r4, #2
 8000b00:	2500      	movs	r5, #0
 8000b02:	42a5      	cmp	r5, r4
 8000b04:	d105      	bne.n	8000b12 <__libc_init_array+0x2e>
 8000b06:	bd70      	pop	{r4, r5, r6, pc}
 8000b08:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000b0c:	4798      	blx	r3
 8000b0e:	3501      	adds	r5, #1
 8000b10:	e7ee      	b.n	8000af0 <__libc_init_array+0xc>
 8000b12:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000b16:	4798      	blx	r3
 8000b18:	3501      	adds	r5, #1
 8000b1a:	e7f2      	b.n	8000b02 <__libc_init_array+0x1e>
 8000b1c:	08000b44 	.word	0x08000b44
 8000b20:	08000b44 	.word	0x08000b44
 8000b24:	08000b44 	.word	0x08000b44
 8000b28:	08000b48 	.word	0x08000b48

08000b2c <_init>:
 8000b2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000b2e:	bf00      	nop
 8000b30:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000b32:	bc08      	pop	{r3}
 8000b34:	469e      	mov	lr, r3
 8000b36:	4770      	bx	lr

08000b38 <_fini>:
 8000b38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000b3a:	bf00      	nop
 8000b3c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000b3e:	bc08      	pop	{r3}
 8000b40:	469e      	mov	lr, r3
 8000b42:	4770      	bx	lr
