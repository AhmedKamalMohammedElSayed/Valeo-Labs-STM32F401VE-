
GPIO.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000658  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  080007ec  080007f4  000107f4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  080007ec  080007ec  000107f4  2**0
                  CONTENTS
  4 .ARM          00000000  080007ec  080007ec  000107f4  2**0
                  CONTENTS
  5 .preinit_array 00000000  080007ec  080007f4  000107f4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080007ec  080007ec  000107ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080007f0  080007f0  000107f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  000107f4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000001c  20000000  080007f4  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000001c  080007f4  0002001c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000107f4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00000419  00000000  00000000  00010824  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000001db  00000000  00000000  00010c3d  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000000c0  00000000  00000000  00010e18  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000088  00000000  00000000  00010ed8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00000f97  00000000  00000000  00010f60  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000034f  00000000  00000000  00011ef7  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000043fa  00000000  00000000  00012246  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00016640  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000001d8  00000000  00000000  000166bc  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	20000000 	.word	0x20000000
 80001b0:	00000000 	.word	0x00000000
 80001b4:	080007d4 	.word	0x080007d4

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000004 	.word	0x20000004
 80001d0:	080007d4 	.word	0x080007d4

080001d4 <Gpio_ConfigPin>:
//BN:		4				35
//team no : 39

#include"GPIO.h"

void Gpio_ConfigPin(uint32 PortName, uint32 PinNum, uint32 PinMode, uint32 DefaultState){
 80001d4:	b480      	push	{r7}
 80001d6:	b085      	sub	sp, #20
 80001d8:	af00      	add	r7, sp, #0
 80001da:	60f8      	str	r0, [r7, #12]
 80001dc:	60b9      	str	r1, [r7, #8]
 80001de:	607a      	str	r2, [r7, #4]
 80001e0:	603b      	str	r3, [r7, #0]

	switch(PortName){
 80001e2:	68fb      	ldr	r3, [r7, #12]
 80001e4:	3b41      	subs	r3, #65	; 0x41
 80001e6:	2b03      	cmp	r3, #3
 80001e8:	f200 80f8 	bhi.w	80003dc <Gpio_ConfigPin+0x208>
 80001ec:	a201      	add	r2, pc, #4	; (adr r2, 80001f4 <Gpio_ConfigPin+0x20>)
 80001ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80001f2:	bf00      	nop
 80001f4:	08000205 	.word	0x08000205
 80001f8:	0800027b 	.word	0x0800027b
 80001fc:	080002f1 	.word	0x080002f1
 8000200:	08000367 	.word	0x08000367
	case GPIO_A:
		CLEAR_BIT(GPIOA_MODER, PinNum*2, 0x03);
 8000204:	4b79      	ldr	r3, [pc, #484]	; (80003ec <Gpio_ConfigPin+0x218>)
 8000206:	681b      	ldr	r3, [r3, #0]
 8000208:	68ba      	ldr	r2, [r7, #8]
 800020a:	0052      	lsls	r2, r2, #1
 800020c:	2103      	movs	r1, #3
 800020e:	fa01 f202 	lsl.w	r2, r1, r2
 8000212:	43d2      	mvns	r2, r2
 8000214:	4611      	mov	r1, r2
 8000216:	4a75      	ldr	r2, [pc, #468]	; (80003ec <Gpio_ConfigPin+0x218>)
 8000218:	400b      	ands	r3, r1
 800021a:	6013      	str	r3, [r2, #0]
		SET_BIT(GPIOA_MODER, PinNum*2, PinMode);
 800021c:	4b73      	ldr	r3, [pc, #460]	; (80003ec <Gpio_ConfigPin+0x218>)
 800021e:	681a      	ldr	r2, [r3, #0]
 8000220:	68bb      	ldr	r3, [r7, #8]
 8000222:	005b      	lsls	r3, r3, #1
 8000224:	6879      	ldr	r1, [r7, #4]
 8000226:	fa01 f303 	lsl.w	r3, r1, r3
 800022a:	4970      	ldr	r1, [pc, #448]	; (80003ec <Gpio_ConfigPin+0x218>)
 800022c:	4313      	orrs	r3, r2
 800022e:	600b      	str	r3, [r1, #0]
		if(DefaultState == GPIO_OPEN_DRAIN || DefaultState == GPIO_PUSH_PULL){
 8000230:	683b      	ldr	r3, [r7, #0]
 8000232:	2b01      	cmp	r3, #1
 8000234:	d002      	beq.n	800023c <Gpio_ConfigPin+0x68>
 8000236:	683b      	ldr	r3, [r7, #0]
 8000238:	2b00      	cmp	r3, #0
 800023a:	d113      	bne.n	8000264 <Gpio_ConfigPin+0x90>
		CLEAR_BIT(GPIOA_OTYPER, PinNum, DefaultState);
 800023c:	4b6c      	ldr	r3, [pc, #432]	; (80003f0 <Gpio_ConfigPin+0x21c>)
 800023e:	681a      	ldr	r2, [r3, #0]
 8000240:	6839      	ldr	r1, [r7, #0]
 8000242:	68bb      	ldr	r3, [r7, #8]
 8000244:	fa01 f303 	lsl.w	r3, r1, r3
 8000248:	43db      	mvns	r3, r3
 800024a:	4969      	ldr	r1, [pc, #420]	; (80003f0 <Gpio_ConfigPin+0x21c>)
 800024c:	4013      	ands	r3, r2
 800024e:	600b      	str	r3, [r1, #0]
		SET_BIT(GPIOA_OTYPER, PinNum, DefaultState);
 8000250:	4b67      	ldr	r3, [pc, #412]	; (80003f0 <Gpio_ConfigPin+0x21c>)
 8000252:	681a      	ldr	r2, [r3, #0]
 8000254:	6839      	ldr	r1, [r7, #0]
 8000256:	68bb      	ldr	r3, [r7, #8]
 8000258:	fa01 f303 	lsl.w	r3, r1, r3
 800025c:	4964      	ldr	r1, [pc, #400]	; (80003f0 <Gpio_ConfigPin+0x21c>)
 800025e:	4313      	orrs	r3, r2
 8000260:	600b      	str	r3, [r1, #0]
		}
		else{
		    SET_BIT(GPIOA_PUPDR, 2*PinNum, DefaultState);
		}
		break;
 8000262:	e0bc      	b.n	80003de <Gpio_ConfigPin+0x20a>
		    SET_BIT(GPIOA_PUPDR, 2*PinNum, DefaultState);
 8000264:	4b63      	ldr	r3, [pc, #396]	; (80003f4 <Gpio_ConfigPin+0x220>)
 8000266:	681a      	ldr	r2, [r3, #0]
 8000268:	68bb      	ldr	r3, [r7, #8]
 800026a:	005b      	lsls	r3, r3, #1
 800026c:	6839      	ldr	r1, [r7, #0]
 800026e:	fa01 f303 	lsl.w	r3, r1, r3
 8000272:	4960      	ldr	r1, [pc, #384]	; (80003f4 <Gpio_ConfigPin+0x220>)
 8000274:	4313      	orrs	r3, r2
 8000276:	600b      	str	r3, [r1, #0]
		break;
 8000278:	e0b1      	b.n	80003de <Gpio_ConfigPin+0x20a>
	case GPIO_B:
		CLEAR_BIT(GPIOB_MODER, PinNum*2, 0x03);
 800027a:	4b5f      	ldr	r3, [pc, #380]	; (80003f8 <Gpio_ConfigPin+0x224>)
 800027c:	681b      	ldr	r3, [r3, #0]
 800027e:	68ba      	ldr	r2, [r7, #8]
 8000280:	0052      	lsls	r2, r2, #1
 8000282:	2103      	movs	r1, #3
 8000284:	fa01 f202 	lsl.w	r2, r1, r2
 8000288:	43d2      	mvns	r2, r2
 800028a:	4611      	mov	r1, r2
 800028c:	4a5a      	ldr	r2, [pc, #360]	; (80003f8 <Gpio_ConfigPin+0x224>)
 800028e:	400b      	ands	r3, r1
 8000290:	6013      	str	r3, [r2, #0]
		SET_BIT(GPIOB_MODER, PinNum*2, PinMode);
 8000292:	4b59      	ldr	r3, [pc, #356]	; (80003f8 <Gpio_ConfigPin+0x224>)
 8000294:	681a      	ldr	r2, [r3, #0]
 8000296:	68bb      	ldr	r3, [r7, #8]
 8000298:	005b      	lsls	r3, r3, #1
 800029a:	6879      	ldr	r1, [r7, #4]
 800029c:	fa01 f303 	lsl.w	r3, r1, r3
 80002a0:	4955      	ldr	r1, [pc, #340]	; (80003f8 <Gpio_ConfigPin+0x224>)
 80002a2:	4313      	orrs	r3, r2
 80002a4:	600b      	str	r3, [r1, #0]
		if(DefaultState == GPIO_OPEN_DRAIN || DefaultState == GPIO_PUSH_PULL){
 80002a6:	683b      	ldr	r3, [r7, #0]
 80002a8:	2b01      	cmp	r3, #1
 80002aa:	d002      	beq.n	80002b2 <Gpio_ConfigPin+0xde>
 80002ac:	683b      	ldr	r3, [r7, #0]
 80002ae:	2b00      	cmp	r3, #0
 80002b0:	d113      	bne.n	80002da <Gpio_ConfigPin+0x106>
		CLEAR_BIT(GPIOB_OTYPER, PinNum, DefaultState);
 80002b2:	4b52      	ldr	r3, [pc, #328]	; (80003fc <Gpio_ConfigPin+0x228>)
 80002b4:	681a      	ldr	r2, [r3, #0]
 80002b6:	6839      	ldr	r1, [r7, #0]
 80002b8:	68bb      	ldr	r3, [r7, #8]
 80002ba:	fa01 f303 	lsl.w	r3, r1, r3
 80002be:	43db      	mvns	r3, r3
 80002c0:	494e      	ldr	r1, [pc, #312]	; (80003fc <Gpio_ConfigPin+0x228>)
 80002c2:	4013      	ands	r3, r2
 80002c4:	600b      	str	r3, [r1, #0]
		SET_BIT(GPIOB_OTYPER, PinNum, DefaultState);
 80002c6:	4b4d      	ldr	r3, [pc, #308]	; (80003fc <Gpio_ConfigPin+0x228>)
 80002c8:	681a      	ldr	r2, [r3, #0]
 80002ca:	6839      	ldr	r1, [r7, #0]
 80002cc:	68bb      	ldr	r3, [r7, #8]
 80002ce:	fa01 f303 	lsl.w	r3, r1, r3
 80002d2:	494a      	ldr	r1, [pc, #296]	; (80003fc <Gpio_ConfigPin+0x228>)
 80002d4:	4313      	orrs	r3, r2
 80002d6:	600b      	str	r3, [r1, #0]
		}
		else{
		    SET_BIT(GPIOB_PUPDR, 2*PinNum, DefaultState);
		}
		break;
 80002d8:	e081      	b.n	80003de <Gpio_ConfigPin+0x20a>
		    SET_BIT(GPIOB_PUPDR, 2*PinNum, DefaultState);
 80002da:	4b49      	ldr	r3, [pc, #292]	; (8000400 <Gpio_ConfigPin+0x22c>)
 80002dc:	681a      	ldr	r2, [r3, #0]
 80002de:	68bb      	ldr	r3, [r7, #8]
 80002e0:	005b      	lsls	r3, r3, #1
 80002e2:	6839      	ldr	r1, [r7, #0]
 80002e4:	fa01 f303 	lsl.w	r3, r1, r3
 80002e8:	4945      	ldr	r1, [pc, #276]	; (8000400 <Gpio_ConfigPin+0x22c>)
 80002ea:	4313      	orrs	r3, r2
 80002ec:	600b      	str	r3, [r1, #0]
		break;
 80002ee:	e076      	b.n	80003de <Gpio_ConfigPin+0x20a>
	case GPIO_C:
		CLEAR_BIT(GPIOC_MODER, PinNum*2, 0x03);
 80002f0:	4b41      	ldr	r3, [pc, #260]	; (80003f8 <Gpio_ConfigPin+0x224>)
 80002f2:	681b      	ldr	r3, [r3, #0]
 80002f4:	68ba      	ldr	r2, [r7, #8]
 80002f6:	0052      	lsls	r2, r2, #1
 80002f8:	2103      	movs	r1, #3
 80002fa:	fa01 f202 	lsl.w	r2, r1, r2
 80002fe:	43d2      	mvns	r2, r2
 8000300:	4611      	mov	r1, r2
 8000302:	4a3d      	ldr	r2, [pc, #244]	; (80003f8 <Gpio_ConfigPin+0x224>)
 8000304:	400b      	ands	r3, r1
 8000306:	6013      	str	r3, [r2, #0]
		SET_BIT(GPIOC_MODER, PinNum*2, PinMode);
 8000308:	4b3b      	ldr	r3, [pc, #236]	; (80003f8 <Gpio_ConfigPin+0x224>)
 800030a:	681a      	ldr	r2, [r3, #0]
 800030c:	68bb      	ldr	r3, [r7, #8]
 800030e:	005b      	lsls	r3, r3, #1
 8000310:	6879      	ldr	r1, [r7, #4]
 8000312:	fa01 f303 	lsl.w	r3, r1, r3
 8000316:	4938      	ldr	r1, [pc, #224]	; (80003f8 <Gpio_ConfigPin+0x224>)
 8000318:	4313      	orrs	r3, r2
 800031a:	600b      	str	r3, [r1, #0]
		if(DefaultState == GPIO_OPEN_DRAIN || DefaultState == GPIO_PUSH_PULL){
 800031c:	683b      	ldr	r3, [r7, #0]
 800031e:	2b01      	cmp	r3, #1
 8000320:	d002      	beq.n	8000328 <Gpio_ConfigPin+0x154>
 8000322:	683b      	ldr	r3, [r7, #0]
 8000324:	2b00      	cmp	r3, #0
 8000326:	d113      	bne.n	8000350 <Gpio_ConfigPin+0x17c>
		CLEAR_BIT(GPIOC_OTYPER, PinNum, DefaultState);
 8000328:	4b34      	ldr	r3, [pc, #208]	; (80003fc <Gpio_ConfigPin+0x228>)
 800032a:	681a      	ldr	r2, [r3, #0]
 800032c:	6839      	ldr	r1, [r7, #0]
 800032e:	68bb      	ldr	r3, [r7, #8]
 8000330:	fa01 f303 	lsl.w	r3, r1, r3
 8000334:	43db      	mvns	r3, r3
 8000336:	4931      	ldr	r1, [pc, #196]	; (80003fc <Gpio_ConfigPin+0x228>)
 8000338:	4013      	ands	r3, r2
 800033a:	600b      	str	r3, [r1, #0]
		SET_BIT(GPIOC_OTYPER, PinNum, DefaultState);
 800033c:	4b2f      	ldr	r3, [pc, #188]	; (80003fc <Gpio_ConfigPin+0x228>)
 800033e:	681a      	ldr	r2, [r3, #0]
 8000340:	6839      	ldr	r1, [r7, #0]
 8000342:	68bb      	ldr	r3, [r7, #8]
 8000344:	fa01 f303 	lsl.w	r3, r1, r3
 8000348:	492c      	ldr	r1, [pc, #176]	; (80003fc <Gpio_ConfigPin+0x228>)
 800034a:	4313      	orrs	r3, r2
 800034c:	600b      	str	r3, [r1, #0]
		}
		else{
		    SET_BIT(GPIOC_PUPDR, 2*PinNum, DefaultState);
		}
		break;
 800034e:	e046      	b.n	80003de <Gpio_ConfigPin+0x20a>
		    SET_BIT(GPIOC_PUPDR, 2*PinNum, DefaultState);
 8000350:	4b2b      	ldr	r3, [pc, #172]	; (8000400 <Gpio_ConfigPin+0x22c>)
 8000352:	681a      	ldr	r2, [r3, #0]
 8000354:	68bb      	ldr	r3, [r7, #8]
 8000356:	005b      	lsls	r3, r3, #1
 8000358:	6839      	ldr	r1, [r7, #0]
 800035a:	fa01 f303 	lsl.w	r3, r1, r3
 800035e:	4928      	ldr	r1, [pc, #160]	; (8000400 <Gpio_ConfigPin+0x22c>)
 8000360:	4313      	orrs	r3, r2
 8000362:	600b      	str	r3, [r1, #0]
		break;
 8000364:	e03b      	b.n	80003de <Gpio_ConfigPin+0x20a>
	case GPIO_D:
		CLEAR_BIT(GPIOD_MODER, PinNum*2, 0x03);
 8000366:	4b24      	ldr	r3, [pc, #144]	; (80003f8 <Gpio_ConfigPin+0x224>)
 8000368:	681b      	ldr	r3, [r3, #0]
 800036a:	68ba      	ldr	r2, [r7, #8]
 800036c:	0052      	lsls	r2, r2, #1
 800036e:	2103      	movs	r1, #3
 8000370:	fa01 f202 	lsl.w	r2, r1, r2
 8000374:	43d2      	mvns	r2, r2
 8000376:	4611      	mov	r1, r2
 8000378:	4a1f      	ldr	r2, [pc, #124]	; (80003f8 <Gpio_ConfigPin+0x224>)
 800037a:	400b      	ands	r3, r1
 800037c:	6013      	str	r3, [r2, #0]
		SET_BIT(GPIOD_MODER, PinNum*2, PinMode);
 800037e:	4b1e      	ldr	r3, [pc, #120]	; (80003f8 <Gpio_ConfigPin+0x224>)
 8000380:	681a      	ldr	r2, [r3, #0]
 8000382:	68bb      	ldr	r3, [r7, #8]
 8000384:	005b      	lsls	r3, r3, #1
 8000386:	6879      	ldr	r1, [r7, #4]
 8000388:	fa01 f303 	lsl.w	r3, r1, r3
 800038c:	491a      	ldr	r1, [pc, #104]	; (80003f8 <Gpio_ConfigPin+0x224>)
 800038e:	4313      	orrs	r3, r2
 8000390:	600b      	str	r3, [r1, #0]
		if(DefaultState == GPIO_OPEN_DRAIN || DefaultState == GPIO_PUSH_PULL){
 8000392:	683b      	ldr	r3, [r7, #0]
 8000394:	2b01      	cmp	r3, #1
 8000396:	d002      	beq.n	800039e <Gpio_ConfigPin+0x1ca>
 8000398:	683b      	ldr	r3, [r7, #0]
 800039a:	2b00      	cmp	r3, #0
 800039c:	d113      	bne.n	80003c6 <Gpio_ConfigPin+0x1f2>
		CLEAR_BIT(GPIOD_OTYPER, PinNum, DefaultState);
 800039e:	4b17      	ldr	r3, [pc, #92]	; (80003fc <Gpio_ConfigPin+0x228>)
 80003a0:	681a      	ldr	r2, [r3, #0]
 80003a2:	6839      	ldr	r1, [r7, #0]
 80003a4:	68bb      	ldr	r3, [r7, #8]
 80003a6:	fa01 f303 	lsl.w	r3, r1, r3
 80003aa:	43db      	mvns	r3, r3
 80003ac:	4913      	ldr	r1, [pc, #76]	; (80003fc <Gpio_ConfigPin+0x228>)
 80003ae:	4013      	ands	r3, r2
 80003b0:	600b      	str	r3, [r1, #0]
		SET_BIT(GPIOD_OTYPER, PinNum, DefaultState);
 80003b2:	4b12      	ldr	r3, [pc, #72]	; (80003fc <Gpio_ConfigPin+0x228>)
 80003b4:	681a      	ldr	r2, [r3, #0]
 80003b6:	6839      	ldr	r1, [r7, #0]
 80003b8:	68bb      	ldr	r3, [r7, #8]
 80003ba:	fa01 f303 	lsl.w	r3, r1, r3
 80003be:	490f      	ldr	r1, [pc, #60]	; (80003fc <Gpio_ConfigPin+0x228>)
 80003c0:	4313      	orrs	r3, r2
 80003c2:	600b      	str	r3, [r1, #0]
		}
		else{
		    SET_BIT(GPIOD_PUPDR, 2*PinNum, DefaultState);
		}
		break;
 80003c4:	e00b      	b.n	80003de <Gpio_ConfigPin+0x20a>
		    SET_BIT(GPIOD_PUPDR, 2*PinNum, DefaultState);
 80003c6:	4b0e      	ldr	r3, [pc, #56]	; (8000400 <Gpio_ConfigPin+0x22c>)
 80003c8:	681a      	ldr	r2, [r3, #0]
 80003ca:	68bb      	ldr	r3, [r7, #8]
 80003cc:	005b      	lsls	r3, r3, #1
 80003ce:	6839      	ldr	r1, [r7, #0]
 80003d0:	fa01 f303 	lsl.w	r3, r1, r3
 80003d4:	490a      	ldr	r1, [pc, #40]	; (8000400 <Gpio_ConfigPin+0x22c>)
 80003d6:	4313      	orrs	r3, r2
 80003d8:	600b      	str	r3, [r1, #0]
		break;
 80003da:	e000      	b.n	80003de <Gpio_ConfigPin+0x20a>
	default:
		break;
 80003dc:	bf00      	nop
	}

}
 80003de:	bf00      	nop
 80003e0:	3714      	adds	r7, #20
 80003e2:	46bd      	mov	sp, r7
 80003e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003e8:	4770      	bx	lr
 80003ea:	bf00      	nop
 80003ec:	40020000 	.word	0x40020000
 80003f0:	40020004 	.word	0x40020004
 80003f4:	4002000c 	.word	0x4002000c
 80003f8:	40020400 	.word	0x40020400
 80003fc:	40020404 	.word	0x40020404
 8000400:	4002040c 	.word	0x4002040c

08000404 <GPIO_ReadPin>:
	}
	return 0;
}


uint32 GPIO_ReadPin(uint32 PortName, uint32 PinNum){
 8000404:	b480      	push	{r7}
 8000406:	b083      	sub	sp, #12
 8000408:	af00      	add	r7, sp, #0
 800040a:	6078      	str	r0, [r7, #4]
 800040c:	6039      	str	r1, [r7, #0]
	switch(PortName){
 800040e:	687b      	ldr	r3, [r7, #4]
 8000410:	3b41      	subs	r3, #65	; 0x41
 8000412:	2b03      	cmp	r3, #3
 8000414:	d82a      	bhi.n	800046c <GPIO_ReadPin+0x68>
 8000416:	a201      	add	r2, pc, #4	; (adr r2, 800041c <GPIO_ReadPin+0x18>)
 8000418:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800041c:	0800042d 	.word	0x0800042d
 8000420:	0800043d 	.word	0x0800043d
 8000424:	0800044d 	.word	0x0800044d
 8000428:	0800045d 	.word	0x0800045d
	case GPIO_A:
	return READ_BIT(GPIOA_IDR,PinNum,0x1);
 800042c:	4b13      	ldr	r3, [pc, #76]	; (800047c <GPIO_ReadPin+0x78>)
 800042e:	681a      	ldr	r2, [r3, #0]
 8000430:	683b      	ldr	r3, [r7, #0]
 8000432:	fa22 f303 	lsr.w	r3, r2, r3
 8000436:	f003 0301 	and.w	r3, r3, #1
 800043a:	e018      	b.n	800046e <GPIO_ReadPin+0x6a>
	break;

	case GPIO_B:
	return READ_BIT(GPIOB_IDR,PinNum,0x1);
 800043c:	4b10      	ldr	r3, [pc, #64]	; (8000480 <GPIO_ReadPin+0x7c>)
 800043e:	681a      	ldr	r2, [r3, #0]
 8000440:	683b      	ldr	r3, [r7, #0]
 8000442:	fa22 f303 	lsr.w	r3, r2, r3
 8000446:	f003 0301 	and.w	r3, r3, #1
 800044a:	e010      	b.n	800046e <GPIO_ReadPin+0x6a>
	break;

	case GPIO_C:
	return READ_BIT(GPIOC_IDR,PinNum,0x1);
 800044c:	4b0c      	ldr	r3, [pc, #48]	; (8000480 <GPIO_ReadPin+0x7c>)
 800044e:	681a      	ldr	r2, [r3, #0]
 8000450:	683b      	ldr	r3, [r7, #0]
 8000452:	fa22 f303 	lsr.w	r3, r2, r3
 8000456:	f003 0301 	and.w	r3, r3, #1
 800045a:	e008      	b.n	800046e <GPIO_ReadPin+0x6a>
	break;

	case GPIO_D:
	return READ_BIT(GPIOD_IDR,PinNum,0x1);
 800045c:	4b08      	ldr	r3, [pc, #32]	; (8000480 <GPIO_ReadPin+0x7c>)
 800045e:	681a      	ldr	r2, [r3, #0]
 8000460:	683b      	ldr	r3, [r7, #0]
 8000462:	fa22 f303 	lsr.w	r3, r2, r3
 8000466:	f003 0301 	and.w	r3, r3, #1
 800046a:	e000      	b.n	800046e <GPIO_ReadPin+0x6a>
	break;
	}
	return 0;
 800046c:	2300      	movs	r3, #0
}
 800046e:	4618      	mov	r0, r3
 8000470:	370c      	adds	r7, #12
 8000472:	46bd      	mov	sp, r7
 8000474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000478:	4770      	bx	lr
 800047a:	bf00      	nop
 800047c:	40020010 	.word	0x40020010
 8000480:	40020410 	.word	0x40020410

08000484 <Rcc_Init>:
#define CLEAR_BIT(X, BIT)          (X &= ~(1 << (BIT)))
#define READ_BIT(X, BIT)           (((X) >> (BIT)) & 1)
#define TOGGLE_BIT(X, BIT)         (X ^= (1 << (BIT)))


void Rcc_Init(void) { SET_BIT(RCC_CR, 0); }
 8000484:	b480      	push	{r7}
 8000486:	af00      	add	r7, sp, #0
 8000488:	4b05      	ldr	r3, [pc, #20]	; (80004a0 <Rcc_Init+0x1c>)
 800048a:	681b      	ldr	r3, [r3, #0]
 800048c:	4a04      	ldr	r2, [pc, #16]	; (80004a0 <Rcc_Init+0x1c>)
 800048e:	f043 0301 	orr.w	r3, r3, #1
 8000492:	6013      	str	r3, [r2, #0]
 8000494:	bf00      	nop
 8000496:	46bd      	mov	sp, r7
 8000498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800049c:	4770      	bx	lr
 800049e:	bf00      	nop
 80004a0:	40023800 	.word	0x40023800

080004a4 <Rcc_Enable>:

void Rcc_Enable(Rcc_PeripheralIdType PeripheralId) {
 80004a4:	b480      	push	{r7}
 80004a6:	b085      	sub	sp, #20
 80004a8:	af00      	add	r7, sp, #0
 80004aa:	4603      	mov	r3, r0
 80004ac:	71fb      	strb	r3, [r7, #7]
  uint8 BusId = PeripheralId / 32;
 80004ae:	79fb      	ldrb	r3, [r7, #7]
 80004b0:	095b      	lsrs	r3, r3, #5
 80004b2:	73fb      	strb	r3, [r7, #15]
  uint8 PeripheralBitPosition = PeripheralId % 32;
 80004b4:	79fb      	ldrb	r3, [r7, #7]
 80004b6:	f003 031f 	and.w	r3, r3, #31
 80004ba:	73bb      	strb	r3, [r7, #14]
  switch (BusId) {
 80004bc:	7bfb      	ldrb	r3, [r7, #15]
 80004be:	2b03      	cmp	r3, #3
 80004c0:	d836      	bhi.n	8000530 <Rcc_Enable+0x8c>
 80004c2:	a201      	add	r2, pc, #4	; (adr r2, 80004c8 <Rcc_Enable+0x24>)
 80004c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80004c8:	080004d9 	.word	0x080004d9
 80004cc:	080004ef 	.word	0x080004ef
 80004d0:	08000505 	.word	0x08000505
 80004d4:	0800051b 	.word	0x0800051b
    case RCC_AHB1:
      SET_BIT(RCC_AHB1ENR, PeripheralBitPosition);
 80004d8:	4b19      	ldr	r3, [pc, #100]	; (8000540 <Rcc_Enable+0x9c>)
 80004da:	681b      	ldr	r3, [r3, #0]
 80004dc:	7bba      	ldrb	r2, [r7, #14]
 80004de:	2101      	movs	r1, #1
 80004e0:	fa01 f202 	lsl.w	r2, r1, r2
 80004e4:	4611      	mov	r1, r2
 80004e6:	4a16      	ldr	r2, [pc, #88]	; (8000540 <Rcc_Enable+0x9c>)
 80004e8:	430b      	orrs	r3, r1
 80004ea:	6013      	str	r3, [r2, #0]
      break;
 80004ec:	e021      	b.n	8000532 <Rcc_Enable+0x8e>
    case RCC_AHB2:
      SET_BIT(RCC_AHB2ENR, PeripheralBitPosition);
 80004ee:	4b15      	ldr	r3, [pc, #84]	; (8000544 <Rcc_Enable+0xa0>)
 80004f0:	681b      	ldr	r3, [r3, #0]
 80004f2:	7bba      	ldrb	r2, [r7, #14]
 80004f4:	2101      	movs	r1, #1
 80004f6:	fa01 f202 	lsl.w	r2, r1, r2
 80004fa:	4611      	mov	r1, r2
 80004fc:	4a11      	ldr	r2, [pc, #68]	; (8000544 <Rcc_Enable+0xa0>)
 80004fe:	430b      	orrs	r3, r1
 8000500:	6013      	str	r3, [r2, #0]
      break;
 8000502:	e016      	b.n	8000532 <Rcc_Enable+0x8e>
    case RCC_APB1:
      SET_BIT(RCC_APB1ENR, PeripheralBitPosition);
 8000504:	4b10      	ldr	r3, [pc, #64]	; (8000548 <Rcc_Enable+0xa4>)
 8000506:	681b      	ldr	r3, [r3, #0]
 8000508:	7bba      	ldrb	r2, [r7, #14]
 800050a:	2101      	movs	r1, #1
 800050c:	fa01 f202 	lsl.w	r2, r1, r2
 8000510:	4611      	mov	r1, r2
 8000512:	4a0d      	ldr	r2, [pc, #52]	; (8000548 <Rcc_Enable+0xa4>)
 8000514:	430b      	orrs	r3, r1
 8000516:	6013      	str	r3, [r2, #0]
      break;
 8000518:	e00b      	b.n	8000532 <Rcc_Enable+0x8e>
    case RCC_APB2:
      SET_BIT(RCC_APB2ENR, PeripheralBitPosition);
 800051a:	4b0c      	ldr	r3, [pc, #48]	; (800054c <Rcc_Enable+0xa8>)
 800051c:	681b      	ldr	r3, [r3, #0]
 800051e:	7bba      	ldrb	r2, [r7, #14]
 8000520:	2101      	movs	r1, #1
 8000522:	fa01 f202 	lsl.w	r2, r1, r2
 8000526:	4611      	mov	r1, r2
 8000528:	4a08      	ldr	r2, [pc, #32]	; (800054c <Rcc_Enable+0xa8>)
 800052a:	430b      	orrs	r3, r1
 800052c:	6013      	str	r3, [r2, #0]
      break;
 800052e:	e000      	b.n	8000532 <Rcc_Enable+0x8e>
    default:
      break;
 8000530:	bf00      	nop
  }
}
 8000532:	bf00      	nop
 8000534:	3714      	adds	r7, #20
 8000536:	46bd      	mov	sp, r7
 8000538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800053c:	4770      	bx	lr
 800053e:	bf00      	nop
 8000540:	40023830 	.word	0x40023830
 8000544:	40023834 	.word	0x40023834
 8000548:	40023840 	.word	0x40023840
 800054c:	40023844 	.word	0x40023844

08000550 <main>:
void delay(uint32 count);
void Seven_Segment_Display(uint8 num);
void handleButtonPress(uint8 *ledColor, uint8 *prevButtonState);

int main(void)
{
 8000550:	b580      	push	{r7, lr}
 8000552:	b082      	sub	sp, #8
 8000554:	af00      	add	r7, sp, #0
    Rcc_Init();
 8000556:	f7ff ff95 	bl	8000484 <Rcc_Init>
    Rcc_Enable(RCC_GPIOA);
 800055a:	2000      	movs	r0, #0
 800055c:	f7ff ffa2 	bl	80004a4 <Rcc_Enable>
    Rcc_Enable(RCC_GPIOB);
 8000560:	2001      	movs	r0, #1
 8000562:	f7ff ff9f 	bl	80004a4 <Rcc_Enable>


    /* pin configuration for seven segment */
    Gpio_ConfigPin(GPIO_A, PIN_0, GPIO_OUTPUT, GPIO_PUSH_PULL);
 8000566:	2300      	movs	r3, #0
 8000568:	2201      	movs	r2, #1
 800056a:	2100      	movs	r1, #0
 800056c:	2041      	movs	r0, #65	; 0x41
 800056e:	f7ff fe31 	bl	80001d4 <Gpio_ConfigPin>
    Gpio_ConfigPin(GPIO_A, PIN_1, GPIO_OUTPUT, GPIO_PUSH_PULL);
 8000572:	2300      	movs	r3, #0
 8000574:	2201      	movs	r2, #1
 8000576:	2101      	movs	r1, #1
 8000578:	2041      	movs	r0, #65	; 0x41
 800057a:	f7ff fe2b 	bl	80001d4 <Gpio_ConfigPin>
    Gpio_ConfigPin(GPIO_A, PIN_2, GPIO_OUTPUT, GPIO_PUSH_PULL);
 800057e:	2300      	movs	r3, #0
 8000580:	2201      	movs	r2, #1
 8000582:	2102      	movs	r1, #2
 8000584:	2041      	movs	r0, #65	; 0x41
 8000586:	f7ff fe25 	bl	80001d4 <Gpio_ConfigPin>
    Gpio_ConfigPin(GPIO_A, PIN_3, GPIO_OUTPUT, GPIO_PUSH_PULL);
 800058a:	2300      	movs	r3, #0
 800058c:	2201      	movs	r2, #1
 800058e:	2103      	movs	r1, #3
 8000590:	2041      	movs	r0, #65	; 0x41
 8000592:	f7ff fe1f 	bl	80001d4 <Gpio_ConfigPin>
    Gpio_ConfigPin(GPIO_A, PIN_4, GPIO_OUTPUT, GPIO_PUSH_PULL);
 8000596:	2300      	movs	r3, #0
 8000598:	2201      	movs	r2, #1
 800059a:	2104      	movs	r1, #4
 800059c:	2041      	movs	r0, #65	; 0x41
 800059e:	f7ff fe19 	bl	80001d4 <Gpio_ConfigPin>
    Gpio_ConfigPin(GPIO_A, PIN_5, GPIO_OUTPUT, GPIO_PUSH_PULL);
 80005a2:	2300      	movs	r3, #0
 80005a4:	2201      	movs	r2, #1
 80005a6:	2105      	movs	r1, #5
 80005a8:	2041      	movs	r0, #65	; 0x41
 80005aa:	f7ff fe13 	bl	80001d4 <Gpio_ConfigPin>
    Gpio_ConfigPin(GPIO_A, PIN_6, GPIO_OUTPUT, GPIO_PUSH_PULL);
 80005ae:	2300      	movs	r3, #0
 80005b0:	2201      	movs	r2, #1
 80005b2:	2106      	movs	r1, #6
 80005b4:	2041      	movs	r0, #65	; 0x41
 80005b6:	f7ff fe0d 	bl	80001d4 <Gpio_ConfigPin>
    Gpio_ConfigPin(GPIO_A, PIN_7, GPIO_OUTPUT, GPIO_PUSH_PULL);
 80005ba:	2300      	movs	r3, #0
 80005bc:	2201      	movs	r2, #1
 80005be:	2107      	movs	r1, #7
 80005c0:	2041      	movs	r0, #65	; 0x41
 80005c2:	f7ff fe07 	bl	80001d4 <Gpio_ConfigPin>


    /* pin configuration for button & RGB LED */
    Gpio_ConfigPin(GPIO_B, PIN_3, GPIO_INPUT, PULL_UP);
 80005c6:	2301      	movs	r3, #1
 80005c8:	2200      	movs	r2, #0
 80005ca:	2103      	movs	r1, #3
 80005cc:	2042      	movs	r0, #66	; 0x42
 80005ce:	f7ff fe01 	bl	80001d4 <Gpio_ConfigPin>
    CLEAR_BIT(GPIOB_OTYPER, 3, 1);
 80005d2:	4b11      	ldr	r3, [pc, #68]	; (8000618 <main+0xc8>)
 80005d4:	681b      	ldr	r3, [r3, #0]
 80005d6:	4a10      	ldr	r2, [pc, #64]	; (8000618 <main+0xc8>)
 80005d8:	f023 0308 	bic.w	r3, r3, #8
 80005dc:	6013      	str	r3, [r2, #0]

    Gpio_ConfigPin(GPIO_B, PIN_5, GPIO_OUTPUT, GPIO_PUSH_PULL);
 80005de:	2300      	movs	r3, #0
 80005e0:	2201      	movs	r2, #1
 80005e2:	2105      	movs	r1, #5
 80005e4:	2042      	movs	r0, #66	; 0x42
 80005e6:	f7ff fdf5 	bl	80001d4 <Gpio_ConfigPin>
    Gpio_ConfigPin(GPIO_B, PIN_6, GPIO_OUTPUT, GPIO_PUSH_PULL);
 80005ea:	2300      	movs	r3, #0
 80005ec:	2201      	movs	r2, #1
 80005ee:	2106      	movs	r1, #6
 80005f0:	2042      	movs	r0, #66	; 0x42
 80005f2:	f7ff fdef 	bl	80001d4 <Gpio_ConfigPin>
    Gpio_ConfigPin(GPIO_B, PIN_7, GPIO_OUTPUT, GPIO_PUSH_PULL);
 80005f6:	2300      	movs	r3, #0
 80005f8:	2201      	movs	r2, #1
 80005fa:	2107      	movs	r1, #7
 80005fc:	2042      	movs	r0, #66	; 0x42
 80005fe:	f7ff fde9 	bl	80001d4 <Gpio_ConfigPin>



    unsigned char ledColor = LED_OFF;
 8000602:	2300      	movs	r3, #0
 8000604:	71fb      	strb	r3, [r7, #7]
    unsigned char prevButtonState = BUTTON_RELEASED;
 8000606:	2301      	movs	r3, #1
 8000608:	71bb      	strb	r3, [r7, #6]

    while (1) {
    	handleButtonPress(&ledColor, &prevButtonState);
 800060a:	1dba      	adds	r2, r7, #6
 800060c:	1dfb      	adds	r3, r7, #7
 800060e:	4611      	mov	r1, r2
 8000610:	4618      	mov	r0, r3
 8000612:	f000 f817 	bl	8000644 <handleButtonPress>
 8000616:	e7f8      	b.n	800060a <main+0xba>
 8000618:	40020404 	.word	0x40020404

0800061c <delay>:
        	ret=Gpio_WritePin(GPIO_A, PIN_6, HIGH);
            break;
    }
}

void delay(uint32 count) {
 800061c:	b480      	push	{r7}
 800061e:	b085      	sub	sp, #20
 8000620:	af00      	add	r7, sp, #0
 8000622:	6078      	str	r0, [r7, #4]
    for ( uint32 i = 0; i < count; i++);
 8000624:	2300      	movs	r3, #0
 8000626:	60fb      	str	r3, [r7, #12]
 8000628:	e002      	b.n	8000630 <delay+0x14>
 800062a:	68fb      	ldr	r3, [r7, #12]
 800062c:	3301      	adds	r3, #1
 800062e:	60fb      	str	r3, [r7, #12]
 8000630:	68fa      	ldr	r2, [r7, #12]
 8000632:	687b      	ldr	r3, [r7, #4]
 8000634:	429a      	cmp	r2, r3
 8000636:	d3f8      	bcc.n	800062a <delay+0xe>
}
 8000638:	bf00      	nop
 800063a:	3714      	adds	r7, #20
 800063c:	46bd      	mov	sp, r7
 800063e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000642:	4770      	bx	lr

08000644 <handleButtonPress>:

void handleButtonPress(uint8 *ledColor, uint8 *prevButtonState) {
 8000644:	b580      	push	{r7, lr}
 8000646:	b084      	sub	sp, #16
 8000648:	af00      	add	r7, sp, #0
 800064a:	6078      	str	r0, [r7, #4]
 800064c:	6039      	str	r1, [r7, #0]

    uint32 buttonState = (GPIO_ReadPin(GPIO_B, PIN_3)) ? BUTTON_RELEASED : BUTTON_PRESSED;
 800064e:	2103      	movs	r1, #3
 8000650:	2042      	movs	r0, #66	; 0x42
 8000652:	f7ff fed7 	bl	8000404 <GPIO_ReadPin>
 8000656:	4603      	mov	r3, r0
 8000658:	2b00      	cmp	r3, #0
 800065a:	bf14      	ite	ne
 800065c:	2301      	movne	r3, #1
 800065e:	2300      	moveq	r3, #0
 8000660:	b2db      	uxtb	r3, r3
 8000662:	60fb      	str	r3, [r7, #12]

    // Active low detection from high state to low state
    if (buttonState == BUTTON_PRESSED && *prevButtonState == BUTTON_RELEASED) {
 8000664:	68fb      	ldr	r3, [r7, #12]
 8000666:	2b00      	cmp	r3, #0
 8000668:	d15b      	bne.n	8000722 <handleButtonPress+0xde>
 800066a:	683b      	ldr	r3, [r7, #0]
 800066c:	781b      	ldrb	r3, [r3, #0]
 800066e:	2b01      	cmp	r3, #1
 8000670:	d157      	bne.n	8000722 <handleButtonPress+0xde>
        // Delay for debouncing
        delay(50);
 8000672:	2032      	movs	r0, #50	; 0x32
 8000674:	f7ff ffd2 	bl	800061c <delay>
        buttonState = (GPIO_ReadPin(GPIO_B, PIN_3)) ? BUTTON_RELEASED : BUTTON_PRESSED;
 8000678:	2103      	movs	r1, #3
 800067a:	2042      	movs	r0, #66	; 0x42
 800067c:	f7ff fec2 	bl	8000404 <GPIO_ReadPin>
 8000680:	4603      	mov	r3, r0
 8000682:	2b00      	cmp	r3, #0
 8000684:	bf14      	ite	ne
 8000686:	2301      	movne	r3, #1
 8000688:	2300      	moveq	r3, #0
 800068a:	b2db      	uxtb	r3, r3
 800068c:	60fb      	str	r3, [r7, #12]
        if (buttonState == BUTTON_PRESSED) {
 800068e:	68fb      	ldr	r3, [r7, #12]
 8000690:	2b00      	cmp	r3, #0
 8000692:	d146      	bne.n	8000722 <handleButtonPress+0xde>
            switch (*ledColor) {
 8000694:	687b      	ldr	r3, [r7, #4]
 8000696:	781b      	ldrb	r3, [r3, #0]
 8000698:	2b60      	cmp	r3, #96	; 0x60
 800069a:	d024      	beq.n	80006e6 <handleButtonPress+0xa2>
 800069c:	2b60      	cmp	r3, #96	; 0x60
 800069e:	dc06      	bgt.n	80006ae <handleButtonPress+0x6a>
 80006a0:	2b20      	cmp	r3, #32
 80006a2:	d014      	beq.n	80006ce <handleButtonPress+0x8a>
 80006a4:	2b40      	cmp	r3, #64	; 0x40
 80006a6:	d016      	beq.n	80006d6 <handleButtonPress+0x92>
 80006a8:	2b00      	cmp	r3, #0
 80006aa:	d00c      	beq.n	80006c6 <handleButtonPress+0x82>
                    break;
                case LED_WHITE:
                    *ledColor = LED_OFF;
                    break;
                default:
                    break;
 80006ac:	e02b      	b.n	8000706 <handleButtonPress+0xc2>
            switch (*ledColor) {
 80006ae:	2ba0      	cmp	r3, #160	; 0xa0
 80006b0:	d021      	beq.n	80006f6 <handleButtonPress+0xb2>
 80006b2:	2ba0      	cmp	r3, #160	; 0xa0
 80006b4:	dc02      	bgt.n	80006bc <handleButtonPress+0x78>
 80006b6:	2b80      	cmp	r3, #128	; 0x80
 80006b8:	d011      	beq.n	80006de <handleButtonPress+0x9a>
                    break;
 80006ba:	e024      	b.n	8000706 <handleButtonPress+0xc2>
            switch (*ledColor) {
 80006bc:	2bc0      	cmp	r3, #192	; 0xc0
 80006be:	d016      	beq.n	80006ee <handleButtonPress+0xaa>
 80006c0:	2be0      	cmp	r3, #224	; 0xe0
 80006c2:	d01c      	beq.n	80006fe <handleButtonPress+0xba>
                    break;
 80006c4:	e01f      	b.n	8000706 <handleButtonPress+0xc2>
                    *ledColor = LED_RED;
 80006c6:	687b      	ldr	r3, [r7, #4]
 80006c8:	2220      	movs	r2, #32
 80006ca:	701a      	strb	r2, [r3, #0]
                    break;
 80006cc:	e01b      	b.n	8000706 <handleButtonPress+0xc2>
                    *ledColor = LED_GREEN;
 80006ce:	687b      	ldr	r3, [r7, #4]
 80006d0:	2240      	movs	r2, #64	; 0x40
 80006d2:	701a      	strb	r2, [r3, #0]
                    break;
 80006d4:	e017      	b.n	8000706 <handleButtonPress+0xc2>
                    *ledColor = LED_BLUE;
 80006d6:	687b      	ldr	r3, [r7, #4]
 80006d8:	2280      	movs	r2, #128	; 0x80
 80006da:	701a      	strb	r2, [r3, #0]
                    break;
 80006dc:	e013      	b.n	8000706 <handleButtonPress+0xc2>
                    *ledColor = LED_YELLOW;
 80006de:	687b      	ldr	r3, [r7, #4]
 80006e0:	2260      	movs	r2, #96	; 0x60
 80006e2:	701a      	strb	r2, [r3, #0]
                    break;
 80006e4:	e00f      	b.n	8000706 <handleButtonPress+0xc2>
                    *ledColor = LED_CYAN;
 80006e6:	687b      	ldr	r3, [r7, #4]
 80006e8:	22c0      	movs	r2, #192	; 0xc0
 80006ea:	701a      	strb	r2, [r3, #0]
                    break;
 80006ec:	e00b      	b.n	8000706 <handleButtonPress+0xc2>
                    *ledColor = LED_MAGENTA;
 80006ee:	687b      	ldr	r3, [r7, #4]
 80006f0:	22a0      	movs	r2, #160	; 0xa0
 80006f2:	701a      	strb	r2, [r3, #0]
                    break;
 80006f4:	e007      	b.n	8000706 <handleButtonPress+0xc2>
                    *ledColor = LED_WHITE;
 80006f6:	687b      	ldr	r3, [r7, #4]
 80006f8:	22e0      	movs	r2, #224	; 0xe0
 80006fa:	701a      	strb	r2, [r3, #0]
                    break;
 80006fc:	e003      	b.n	8000706 <handleButtonPress+0xc2>
                    *ledColor = LED_OFF;
 80006fe:	687b      	ldr	r3, [r7, #4]
 8000700:	2200      	movs	r2, #0
 8000702:	701a      	strb	r2, [r3, #0]
                    break;
 8000704:	bf00      	nop
            }

            // Update LED color
            GPIOB_ODR &= ~((1 << 5) | (1 << 6) | (1 << 7));  // Clear bits for pins 5, 6, and 7
 8000706:	4b0b      	ldr	r3, [pc, #44]	; (8000734 <handleButtonPress+0xf0>)
 8000708:	681b      	ldr	r3, [r3, #0]
 800070a:	4a0a      	ldr	r2, [pc, #40]	; (8000734 <handleButtonPress+0xf0>)
 800070c:	f023 03e0 	bic.w	r3, r3, #224	; 0xe0
 8000710:	6013      	str	r3, [r2, #0]

            // Set LED color by OR-ing with the desired ledColor
            GPIOB_ODR |= *ledColor;
 8000712:	4b08      	ldr	r3, [pc, #32]	; (8000734 <handleButtonPress+0xf0>)
 8000714:	681b      	ldr	r3, [r3, #0]
 8000716:	687a      	ldr	r2, [r7, #4]
 8000718:	7812      	ldrb	r2, [r2, #0]
 800071a:	4611      	mov	r1, r2
 800071c:	4a05      	ldr	r2, [pc, #20]	; (8000734 <handleButtonPress+0xf0>)
 800071e:	430b      	orrs	r3, r1
 8000720:	6013      	str	r3, [r2, #0]
        }
    }
    *prevButtonState = buttonState;
 8000722:	68fb      	ldr	r3, [r7, #12]
 8000724:	b2da      	uxtb	r2, r3
 8000726:	683b      	ldr	r3, [r7, #0]
 8000728:	701a      	strb	r2, [r3, #0]
}
 800072a:	bf00      	nop
 800072c:	3710      	adds	r7, #16
 800072e:	46bd      	mov	sp, r7
 8000730:	bd80      	pop	{r7, pc}
 8000732:	bf00      	nop
 8000734:	40020414 	.word	0x40020414

08000738 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000738:	480d      	ldr	r0, [pc, #52]	; (8000770 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800073a:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 800073c:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000740:	480c      	ldr	r0, [pc, #48]	; (8000774 <LoopForever+0x6>)
  ldr r1, =_edata
 8000742:	490d      	ldr	r1, [pc, #52]	; (8000778 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000744:	4a0d      	ldr	r2, [pc, #52]	; (800077c <LoopForever+0xe>)
  movs r3, #0
 8000746:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000748:	e002      	b.n	8000750 <LoopCopyDataInit>

0800074a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800074a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800074c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800074e:	3304      	adds	r3, #4

08000750 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000750:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000752:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000754:	d3f9      	bcc.n	800074a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000756:	4a0a      	ldr	r2, [pc, #40]	; (8000780 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000758:	4c0a      	ldr	r4, [pc, #40]	; (8000784 <LoopForever+0x16>)
  movs r3, #0
 800075a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800075c:	e001      	b.n	8000762 <LoopFillZerobss>

0800075e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800075e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000760:	3204      	adds	r2, #4

08000762 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000762:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000764:	d3fb      	bcc.n	800075e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000766:	f000 f811 	bl	800078c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800076a:	f7ff fef1 	bl	8000550 <main>

0800076e <LoopForever>:

LoopForever:
    b LoopForever
 800076e:	e7fe      	b.n	800076e <LoopForever>
  ldr   r0, =_estack
 8000770:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000774:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000778:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 800077c:	080007f4 	.word	0x080007f4
  ldr r2, =_sbss
 8000780:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 8000784:	2000001c 	.word	0x2000001c

08000788 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000788:	e7fe      	b.n	8000788 <ADC_IRQHandler>
	...

0800078c <__libc_init_array>:
 800078c:	b570      	push	{r4, r5, r6, lr}
 800078e:	4e0d      	ldr	r6, [pc, #52]	; (80007c4 <__libc_init_array+0x38>)
 8000790:	4c0d      	ldr	r4, [pc, #52]	; (80007c8 <__libc_init_array+0x3c>)
 8000792:	1ba4      	subs	r4, r4, r6
 8000794:	10a4      	asrs	r4, r4, #2
 8000796:	2500      	movs	r5, #0
 8000798:	42a5      	cmp	r5, r4
 800079a:	d109      	bne.n	80007b0 <__libc_init_array+0x24>
 800079c:	4e0b      	ldr	r6, [pc, #44]	; (80007cc <__libc_init_array+0x40>)
 800079e:	4c0c      	ldr	r4, [pc, #48]	; (80007d0 <__libc_init_array+0x44>)
 80007a0:	f000 f818 	bl	80007d4 <_init>
 80007a4:	1ba4      	subs	r4, r4, r6
 80007a6:	10a4      	asrs	r4, r4, #2
 80007a8:	2500      	movs	r5, #0
 80007aa:	42a5      	cmp	r5, r4
 80007ac:	d105      	bne.n	80007ba <__libc_init_array+0x2e>
 80007ae:	bd70      	pop	{r4, r5, r6, pc}
 80007b0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80007b4:	4798      	blx	r3
 80007b6:	3501      	adds	r5, #1
 80007b8:	e7ee      	b.n	8000798 <__libc_init_array+0xc>
 80007ba:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80007be:	4798      	blx	r3
 80007c0:	3501      	adds	r5, #1
 80007c2:	e7f2      	b.n	80007aa <__libc_init_array+0x1e>
 80007c4:	080007ec 	.word	0x080007ec
 80007c8:	080007ec 	.word	0x080007ec
 80007cc:	080007ec 	.word	0x080007ec
 80007d0:	080007f0 	.word	0x080007f0

080007d4 <_init>:
 80007d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80007d6:	bf00      	nop
 80007d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80007da:	bc08      	pop	{r3}
 80007dc:	469e      	mov	lr, r3
 80007de:	4770      	bx	lr

080007e0 <_fini>:
 80007e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80007e2:	bf00      	nop
 80007e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80007e6:	bc08      	pop	{r3}
 80007e8:	469e      	mov	lr, r3
 80007ea:	4770      	bx	lr
